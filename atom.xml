<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-18T17:57:33.775Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的常用类</title>
    <link href="http://example.com/2022/03/19/Java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <id>http://example.com/2022/03/19/Java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB/</id>
    <published>2022-03-19T13:30:33.000Z</published>
    <updated>2022-03-18T17:57:33.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><ol><li><p>什么是包装类：<br>以前定义变量，经常使用基本数据类型，<br>对于基本数据类型来说，它就是一个数，加点属性，加点方法，加点构造器，<br>将基本数据类型对应进行了一个封装，产生了一个新的类，—》包装类。<br>int,byte…..—&gt;基本数据类型<br>包装类—&gt;引用数据类型</p></li><li><p>对应关系：<br>基本数据类型          对应的包装类                继承关系<br>byte                          Byte                           —》Number—》Object<br>short                         Short                         —》Number—》Object<br>int                             Integer                      —》Number—》Object<br>long                          Long                          —》Number—》Object<br>float                          Float                          —》Number—》Object<br>double                      Double                      —》Number—》Object<br>char                          Character                  Object<br>boolean                    Boolean                    Object</p></li><li><p>已经有基本数据类型了，为什么要封装为包装类？<br>（1）java语言 面向对象的语言，最擅长的操作各种各样的类。<br>（2）以前学习装数据的—》数组，int[]  String[]  double[]   Student[]<br>  以后学习的装数据的—》集合，有一个特点，只能装引用数据类型的数据</p></li></ol><p>4.不是有了包装类以后就不用基本数据类型。</p><h1 id="日期相关类"><a href="#日期相关类" class="headerlink" title="日期相关类"></a>日期相关类</h1><h2 id="java-util-Date"><a href="#java-util-Date" class="headerlink" title="java.util.Date"></a>java.util.Date</h2><p>public class Test {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //java.util.Date:<br>        Date d = new Date();<br>        System.out.println(d);<br>        System.out.println(d.toString());<br>        System.out.println(d.toGMTString());//过期方法，过时方法，废弃方法。<br>        System.out.println(d.toLocaleString());<br>        System.out.println(d.getYear());//120+1900=2020<br>        System.out.println(d.getMonth());//5 :返回的值在 0 和 11 之间，值 0 表示 1 月。<br>        //返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。<br>        System.out.println(d.getTime());//1592055964263<br>        System.out.println(System.currentTimeMillis());<br>        /*<br>        （1）疑问：以后获取时间差用：getTime()还是currentTimeMillis()<br>        答案：currentTimeMillis()–》因为这个方法是静态的，可以类名.方法名直接调用<br>        （2）public static native long currentTimeMillis();<br>        本地方法<br>        为什么没有方法体？因为这个方法的具体实现不是通过java写的。<br>        （3）这个方法的作用：<br>        一般会去衡量一些算法所用的时间<br>         */<br>        long startTime = System.currentTimeMillis();<br>        for (int i = 0; i &lt; 100000; i++) {<br>            System.out.println(i);<br>        }<br>        long endTime = System.currentTimeMillis();<br>        System.out.println(endTime-startTime);<br>    }<br>}</p><h2 id="java-sql-Date"><a href="#java-sql-Date" class="headerlink" title="java.sql.Date"></a>java.sql.Date</h2><p>public class Test02 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //java.sql.Date:<br>        Date d = new Date(1592055964263L);<br>        System.out.println(d);<br>        /*<br>        (1)java.sql.Date和java.util.Date的区别：<br>        java.util.Date：年月日  时分秒<br>        java.sql.Date：年月日<br>        (2)java.sql.Date和java.util.Date的联系：<br>        java.sql.Date(子类) extends java.util.Date （父类）<br>         <em>/<br>        //java.sql.Date和java.util.Date相互转换：<br>        //【1】util—&gt;sql:<br>        java.util.Date date = new Date(1592055964263L);//创建util.Date的对象<br>        //方式1：向下转型<br>        Date date1 = (Date) date;<br>        /</em><br>        父类：Animal 子类：Dog<br>        Animal an = new Dog();<br>        Dog d = (Dog)an;<br>         */<br>        //方式2：利用构造器<br>        Date date2 = new Date(date.getTime());<br>        //【2】sql–&gt;util:<br>        java.util.Date date3 = d;<br>        //[3]String—&gt;sql.Date:<br>        Date date4 =  Date.valueOf(“2019-3-8”);<br>    }<br>}</p><h2 id="String—》java-util-Date-类型转换"><a href="#String—》java-util-Date-类型转换" class="headerlink" title="String—》java.util.Date 类型转换"></a>String—》java.util.Date 类型转换</h2><p>分解：<br>（1）String—&gt;java.sql.Date<br>（2）java.sql.Date—&gt;java.util.Date<br>public class Test04 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //（1）String—&gt;java.sql.Date<br>        java.sql.Date date = java.sql.Date.valueOf(“2015-9-24”);<br>        //（2）java.sql.Date—&gt;java.util.Date<br>        java.util.Date date2 = date;<br>        System.out.println(date2.toString());<br>    }<br>}<br>上面的代码有局限性，字符串的格式只能是年-月-日拼接的形式，换成其它类型，就会出现异常：</p><p>【2】引入新的类：SimpleDateFormat</p><p>package com.msb.test02;<br>import java.text.DateFormat;<br>import java.text.ParseException;<br>import java.text.SimpleDateFormat;<br>import java.util.Date;<br>/**</p><ul><li>@Auther: msb-zhaoss</li><li>/<br>public class Test05 {<br>  //这是一个main方法，是程序的入口：<br>  public static void main(String[] args) {<pre><code>  //日期转换：  //SimpleDateFormat(子类) extends DateFormat（父类是一个抽象类）  //格式化的标准已经定义好了：  DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  //String---&gt;Date  try &#123;      Date d = df.parse(&quot;2019-4-6 12:23:54&quot;);      System.out.println(d);  &#125; catch (ParseException e) &#123;      e.printStackTrace();  &#125;  //Date---&gt;String  String format = df.format(new Date());  System.out.println(format);  Date date = new Date();  System.out.println(date.toString());  System.out.println(date.toGMTString());  System.out.println(date.toLocaleString());</code></pre>  }<br>}<br>日期格式：<br>！<a href="/images/%E6%97%A5%E6%9C%9F%E7%B1%BB.png"></a><h2 id="Calender"><a href="#Calender" class="headerlink" title="Calender"></a>Calender</h2>import java.util.Calendar;<br>import java.util.GregorianCalendar;<br>public class Test06 {<br>  //这是一个main方法，是程序的入口：<br>  public static void main(String[] args) {<pre><code>  //Calendar是一个抽象类，不可以直接创建对象  //GregorianCalendar()子类 extends Calendar（父类是一个抽象类）  Calendar cal = new GregorianCalendar();  Calendar cal2 = Calendar.getInstance();  System.out.println(cal);  //常用的方法：  // get方法，传入参数：Calendar中定义的常量  System.out.println(cal.get(Calendar.YEAR));  System.out.println(cal.get(Calendar.MONTH));  System.out.println(cal.get(Calendar.DATE));  System.out.println(cal.get(Calendar.DAY_OF_WEEK));  System.out.println(cal.getActualMaximum(Calendar.DATE));//获取当月日期的最大天数  System.out.println(cal.getActualMinimum(Calendar.DATE));//获取当月日期的最小天数  // set方法：可以改变Calendar中的内容  cal.set(Calendar.YEAR,1990);  cal.set(Calendar.MONTH,3);  cal.set(Calendar.DATE,16);  System.out.println(cal);  //String---&gt;Calendar:  //分解：  //String---&gt;java.sql.Date:  java.sql.Date date = java.sql.Date.valueOf(&quot;2020-4-5&quot;);  //java.sql.Date--&gt;Calendar:  cal.setTime(date);  System.out.println(cal);</code></pre>  }<br>}<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E6%97%A5%E6%9C%9F%E7%BB%83%E4%B9%A0.png"                                     ><br>import java.util.Calendar;<br>import java.util.Scanner;<br>public class Test08 {<br>  //这是一个main方法，是程序的入口：<br>  public static void main(String[] args) {<pre><code>  //录入日期的String：  Scanner sc = new Scanner(System.in);  System.out.print(&quot;请输入你想要查看的日期：（提示：请按照例如2012-5-6的格式书写）&quot;);  String strDate = sc.next();  /*System.out.println(strDate);*/  //String---&gt;Calendar:  //String--&gt;Date:  java.sql.Date date = java.sql.Date.valueOf(strDate);  //Date---&gt;Calendar:  Calendar cal = Calendar.getInstance();  cal.setTime(date);  //后续操作：  //星期提示：  System.out.println(&quot;日\t一\t二\t三\t四\t五\t六\t&quot;);  //获取本月的最大天数：  int maxDay = cal.getActualMaximum(Calendar.DATE);  //获取当前日期中的日：  int nowDay = cal.get(Calendar.DATE);  //将日期调为本月的1号：  cal.set(Calendar.DATE,1);  //获取这个一号是本周的第几天：  int num = cal.get(Calendar.DAY_OF_WEEK);  /*System.out.println(num);*/  //前面空出来的天数为：  int day = num - 1;  //引入一个计数器：  int count = 0;//计数器最开始值为0  //在日期前将空格打印出来：  for (int i = 1; i &lt;= day; i++) &#123;      System.out.print(&quot;\t&quot;);  &#125;  //空出来的日子也要放入计数器：  count = count + day;  //遍历：从1号开始到maxDay号进行遍历：  for (int i = 1; i &lt;= maxDay ; i++) &#123;      if(i == nowDay)&#123;//如果遍历的i和当前日子一样的话，后面多拼一个*          System.out.print(i+&quot;*&quot;+&quot;\t&quot;);      &#125;else&#123;          System.out.print(i+&quot;\t&quot;);      &#125;      count++;//每在控制台输出一个数字，计数器做加1操作      if(count%7 == 0)&#123;//当计数器的个数是7的倍数的时候，就换行操作          System.out.println();      &#125;  &#125;</code></pre>  }<br>}<h2 id="JDK1-8新增的日期API"><a href="#JDK1-8新增的日期API" class="headerlink" title="JDK1.8新增的日期API"></a>JDK1.8新增的日期API</h2>JDK1.0中使用java.util.Date类  –》第一批日期时间API</li></ul><p>JDK1.1引入Calendar类   –》第二批日期时间API<br>缺陷：<br>可变性 : 像日期和时间这样的类应该是不可变的。<br>偏移性 : Date中 的年份是从1900开始的，而月份都从0开始。<br>格式化 : 格式化只对Date有用，Calendar则不行。</p><p>JDK1.8新增日期时间API –》第三批日期时间API</p><ol><li>java.time.LocalDate;</li><li>java.time.LocalDateTime;</li><li>java.time.LocalTime<br>public class Test09 {<br> //这是一个main方法，是程序的入口：<br> public static void main(String[] args) {<pre><code> //1.完成实例化： //方法1：now()--获取当前的日期，时间，日期+时间 LocalDate localDate = LocalDate.now(); System.out.println(localDate); LocalTime localTime = LocalTime.now(); System.out.println(localTime); LocalDateTime localDateTime = LocalDateTime.now(); System.out.println(localDateTime); //方法2：of()--设置指定的日期，时间，日期+时间 LocalDate of = LocalDate.of(2010, 5, 6); System.out.println(of); LocalTime of1 = LocalTime.of(12, 35, 56); System.out.println(of1); LocalDateTime of2 = LocalDateTime.of(1890, 12, 23, 13, 24, 15); System.out.println(of2); //LocalDate,LocalTime用的不如LocalDateTime多 //下面讲解用LocalDateTime： //一些列常用的get*** System.out.println(localDateTime.getYear());//2020 System.out.println(localDateTime.getMonth());//JUNE System.out.println(localDateTime.getMonthValue());//6 System.out.println(localDateTime.getDayOfMonth());//14 System.out.println(localDateTime.getDayOfWeek());//SUNDAY System.out.println(localDateTime.getHour());//22 System.out.println(localDateTime.getMinute());//22 System.out.println(localDateTime.getSecond());//6 //不是set方法，叫with //体会：不可变性 LocalDateTime localDateTime2 = localDateTime.withMonth(8); System.out.println(localDateTime); System.out.println(localDateTime2); //提供了加减的操作： //加： LocalDateTime localDateTime1 = localDateTime.plusMonths(4); System.out.println(localDateTime); System.out.println(localDateTime1); //减： LocalDateTime localDateTime3 = localDateTime.minusMonths(5); System.out.println(localDateTime); System.out.println(localDateTime3);</code></pre> }<br>}</li><li>java.time.format.DateTimeFormatter;</li><li>java.time.format.FormatStyle;<br>public class Test10 {<br> //这是一个main方法，是程序的入口：<br> public static void main(String[] args) {<pre><code> //格式化类：DateTimeFormatter //方式一:预定义的标准格式。如: ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;IS0_LOCAL_TIME DateTimeFormatter df1 = DateTimeFormatter.ISO_LOCAL_DATE_TIME; //df1就可以帮我们完成LocalDateTime和String之间的相互转换： //LocalDateTime--&gt;String: LocalDateTime now = LocalDateTime.now(); String str = df1.format(now); System.out.println(str);//2020-06-15T15:02:51.29 //String---&gt;LocalDateTime TemporalAccessor parse = df1.parse(&quot;2020-06-15T15:02:51.29&quot;); System.out.println(parse); //方式二:本地化相关的格式。如: oflocalizedDateTime() //参数：FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT //FormatStyle.LONG :2020年6月15日 下午03时17分13秒 //FormatStyle.MEDIUM: 2020-6-15 15:17:42 //FormatStyle.SHORT:20-6-15 下午3:18 DateTimeFormatter df2 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT); //LocalDateTime--&gt;String: LocalDateTime now1 = LocalDateTime.now(); String str2 = df2.format(now1); System.out.println(str2); //String---&gt;LocalDateTime TemporalAccessor parse1 = df2.parse(&quot;20-6-15 下午3:18&quot;); System.out.println(parse1); //方式三: 自定义的格式。如: ofPattern( &quot;yyyy-MM-dd hh:mm:ss&quot;) ---》重点，以后常用 DateTimeFormatter df3 = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;); //LocalDateTime--&gt;String: LocalDateTime now2 = LocalDateTime.now(); String format = df3.format(now2); System.out.println(format);//2020-06-15 03:22:03 //String---&gt;LocalDateTime TemporalAccessor parse2 = df3.parse(&quot;2020-06-15 03:22:03&quot;); System.out.println(parse2);</code></pre> }<br>}<h1 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h1></li><li>直接使用，无需导包：</li><li>final修饰类，这个类不能被继承：</li><li>构造器私有化，不能创建Math类的对象：<br>不能：<br>Math m = new Math();</li><li>Math内部的所有的属性，方法都被static修饰：类名.直接调用，无需创建对象：</li><li>常用方法：</li></ol><p>package com.msb.test03;<br>public class Test01 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //常用属性：<br>        System.out.println(Math.PI);<br>        //常用方法：<br>        System.out.println(“随机数：”+Math.random());//[0.0,1.0)<br>        System.out.println(“绝对值：”+Math.abs(-80));<br>        System.out.println(“向上取值：”+Math.ceil(9.1));<br>        System.out.println(“向下取值：”+Math.floor(9.9));<br>        System.out.println(“四舍五入：”+Math.round(3.5));<br>        System.out.println(“取大的那个值：”+Math.max(3, 6));<br>        System.out.println(“取小的那个值：”+Math.min(3, 6));<br>    }<br>}<br>6. 静态导入：</p><p>package com.msb.test03;<br>//静态导入：<br>import static java.lang.Math.*;<br>public class Test01 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //常用属性：<br>        System.out.println(PI);<br>        //常用方法：<br>        System.out.println(“随机数：”+random());//[0.0,1.0)<br>        System.out.println(“绝对值：”+abs(-80));<br>        System.out.println(“向上取值：”+ceil(9.1));<br>        System.out.println(“向下取值：”+floor(9.9));<br>        System.out.println(“四舍五入：”+round(3.5));<br>        System.out.println(“取大的那个值：”+max(3, 6));<br>        System.out.println(“取小的那个值：”+min(3, 6));<br>    }<br>    //如果跟Math中方法重复了，那么会优先走本类中的方法（就近原则）<br>    public static int random(){<br>        return 100;<br>    }<br>}</p><h1 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h1><p>import java.util.Random;<br>public class Test02 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。<br>        System.out.println(“随机数：”+Math.random());<br>        //学习Random类<br>        //（1）利用带参数的构造器创建对象：<br>        Random r1 = new Random(System.currentTimeMillis());<br>        int i = r1.nextInt();<br>        System.out.println(i);<br>        //（2）利用空参构造器创建对象：<br>        Random r2 = new Random();//表面是在调用无参数构造器，实际底层还是调用了带参构造器<br>        System.out.println(r2.nextInt(10));//在 0（包括）和指定值（不包括）之间均匀分布的 int 值。<br>        System.out.println(r2.nextDouble());//在 0.0 和 1.0 之间均匀分布的 double 值。<br>    }<br>}<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/random.png"                                     ></p><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><p>1.直接使用，无需导包：<br>2.String str = “abc”;<br>“abc”就是String类下的一个具体的对象<br>3.字符串是不可变的：？？？？<br>4.这个String类不可以被继承，不能有子类：<br>5.String底层是一个char类型的数组</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li>构造器：底层就是给对象底层的value数组进行赋值操作。</li></ol><p> //通过构造器来创建对象：<br>        String s1 = new String();<br>        String s2 = new String(“abc”);<br>        String s3 = new String(new char[]{‘a’,’b’,’c’});<br>2. 常用方法：<br>String s4 = “abc”;<br>        System.out.println(“字符串的长度为：”+s4.length());<br>        String s5 = new SZtring(“abc”);<br>        System.out.println(“字符串是否为空：”+s5.isEmpty());<br>        System.out.println(“获取字符串的下标对应的字符为：”+s5.charAt(1));</p><p>equals:</p><pre><code>    String s6 = new String(&quot;abc&quot;);    String s7 = new String(&quot;abc&quot;);    System.out.println(s6.equals(s7));</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/equals.png"                                     ></p><p>String类实现了Comparable，里面有一个抽象方法叫compareTo，所以String中一定要对这个方法进行重写：4</p><p>String s8 = new String(“abc”);<br>        String s9 = new String(“abc”);<br>        System.out.println(s8.compareTo(s9));<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/comparable.png"                                     ></p><ol start="3"><li>字符串的截取：<pre><code> String s10 = &quot;abcdefhijk&quot;; System.out.println(s10.substring(3)); System.out.println(s10.substring(3, 6));//[3,6) //字符串的合并/拼接操作： System.out.println(s10.concat(&quot;pppp&quot;)); //字符串中的字符的替换： String s11 = &quot;abcdeahija&quot;; System.out.println(s11.replace(&#39;a&#39;, &#39;u&#39;)); //按照指定的字符串进行分裂为数组的形式： String s12 = &quot;a-b-c-d-e-f&quot;; String[] strs = s12.split(&quot;-&quot;); System.out.println(Arrays.toString(strs)); //转大小写的方法： String s13 = &quot;abc&quot;; System.out.println(s13.toUpperCase()); System.out.println(s13.toUpperCase().toLowerCase()); //去除收尾空格： String s14 = &quot;    a  b  c    &quot;; System.out.println(s14.trim()); //toString() String s15 = &quot;abc&quot;; System.out.println(s15.toString()); //转换为String类型：</code></pre><h1 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h1><h2 id="StringBuilder类-1"><a href="#StringBuilder类-1" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h2></li><li>字符串的分类：<br>（1）不可变字符串：String<br>（2）可变字符串：StringBuilder，StringBuffer</li></ol><p>疑问：<br>（1）可变不可变？？<br>（2）本节课重点：StringBuilder   —–》√<br>（3）StringBuilder和StringBuffer区别  ？？</p><ol start="2"><li><p>StringBuilder底层：非常重要的两个属性：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/StringBuilder%E5%BA%95%E5%B1%82.png"                                     ></p></li><li><p>对应内存分析：<br>package com.msb.test05;<br>public class Test01 {<br> //这是一个main方法，是程序的入口：<br> public static void main(String[] args) {</p><pre><code> //创建StringBuilder的对象： StringBuilder sb3 = new StringBuilder(); //表面上调用StringBuilder的空构造器，实际底层是对value数组进行初始化，长度为16 StringBuilder sb2 = new StringBuilder(3); //表面上调用StringBuilder的有参构造器，传入一个int类型的数，实际底层就是对value数组进行初始化，长度为你传入的数字 StringBuilder sb = new StringBuilder(&quot;abc&quot;); System.out.println(sb.append(&quot;def&quot;).append(&quot;aaaaaaaa&quot;).append(&quot;bbb&quot;).append(&quot;ooooooo&quot;).toString());;//链式调用方式：return this</code></pre><p> }<br>}<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/StringBuilder.png"                                     ></p><h2 id="解释可变和不可变字符串"><a href="#解释可变和不可变字符串" class="headerlink" title="解释可变和不可变字符串"></a>解释可变和不可变字符串</h2></li><li><p>String—》不可变<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/StringBuilder%E5%8F%AF%E5%8F%98.png"                                     ></p></li><li><p>StringBuilder—》可变<br>可变，在StringBuilder这个对象的地址不变的情况下，想把“abc”变成“abcdef”是可能的，直接追加即可<br>public class Test02 {<br> //这是一个main方法，是程序的入口：<br> public static void main(String[] args) {</p><pre><code> StringBuilder sb = new StringBuilder(); System.out.println(sb.append(&quot;abc&quot;)==sb.append(&quot;def&quot;));//true</code></pre><p> }<br>}</p><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2></li><li><p>StringBuilder常用方法：<br>package com.msb.test05;<br>public class Test03 {<br> //这是一个main方法，是程序的入口：<br> public static void main(String[] args) {</p><pre><code> StringBuilder sb=new StringBuilder(&quot;nihaojavawodeshijie&quot;); //增 sb.append(&quot;这是梦想&quot;); System.out.println(sb);//nihaojavawodeshijie这是梦想 //删 sb.delete(3, 6);//删除位置在[3,6)上的字符 System.out.println(sb);//nihavawodeshijie这是梦想 sb.deleteCharAt(16);//删除位置在16上的字符 System.out.println(sb);//nihavawodeshijie是梦想 //改--&gt;插入 StringBuilder sb1=new StringBuilder(&quot;$23445980947&quot;); sb1.insert(3, &quot;,&quot;);//在下标为3的位置上插入 , System.out.println(sb1); StringBuilder sb2=new StringBuilder(&quot;$2你好吗5980947&quot;); //改--&gt;替换 sb2.replace(3, 5, &quot;我好累&quot;);//在下标[3,5)位置上插入字符串 System.out.println(sb2); sb.setCharAt(3, &#39;!&#39;); System.out.println(sb); //查 StringBuilder sb3=new StringBuilder(&quot;asdfa&quot;); for (int i = 0; i &lt; sb3.length(); i++) &#123;     System.out.print(sb3.charAt(i)+&quot;\t&quot;); &#125; System.out.println(); //截取 String str=sb3.substring(2,4);//截取[2,4)返回的是一个新的String，对StringBuilder没有影响 System.out.println(str); System.out.println(sb3);</code></pre><p> }<br>}</p></li><li><p>StringBuffer常用方法：<br>public class Test03 {<br> //这是一个main方法，是程序的入口：<br> public static void main(String[] args) {</p><pre><code> StringBuffer sb=new StringBuffer(&quot;nihaojavawodeshijie&quot;); //增 sb.append(&quot;这是梦想&quot;); System.out.println(sb);//nihaojavawodeshijie这是梦想 //删 sb.delete(3, 6);//删除位置在[3,6)上的字符 System.out.println(sb);//nihavawodeshijie这是梦想 sb.deleteCharAt(16);//删除位置在16上的字符 System.out.println(sb);//nihavawodeshijie是梦想 //改--&gt;插入 StringBuilder sb1=new StringBuilder(&quot;$23445980947&quot;); sb1.insert(3, &quot;,&quot;);//在下标为3的位置上插入 , System.out.println(sb1); StringBuilder sb2=new StringBuilder(&quot;$2你好吗5980947&quot;); //改--&gt;替换 sb2.replace(3, 5, &quot;我好累&quot;);//在下标[3,5)位置上插入字符串 System.out.println(sb2); sb.setCharAt(3, &#39;!&#39;); System.out.println(sb); //查 StringBuilder sb3=new StringBuilder(&quot;asdfa&quot;); for (int i = 0; i &lt; sb3.length(); i++) &#123;     System.out.print(sb3.charAt(i)+&quot;\t&quot;); &#125; System.out.println(); //截取 String str=sb3.substring(2,4);//截取[2,4)返回的是一个新的String，对StringBuilder没有影响 System.out.println(str); System.out.println(sb3);</code></pre><p> }<br>}</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>String、StringBuffer、StringBuilder区别与联系</p></li><li><p>String类是不可变类，即一旦一个String对象被创建后，包含在这个对象中的字符序列是不可改变的，直至这个对象销毁。</p></li><li><p>StringBuffer类则代表一个字符序列可变的字符串，可以通过append、insert、reverse、setChartAt、setLength等方法改变其内容。一旦生成了最终的字符串，调用toString方法将其转变为String</p></li><li><p>JDK1.5新增了一个StringBuilder类，与StringBuffer相似，构造方法和方法基本相同。不同是StringBuffer是线程安全的，而StringBuilder是线程不安全的，所以性能略高。通常情况下，创建一个内容可变的字符串，应该优先考虑使用StringBuilder</p></li></ol><p>    StringBuilder:JDK1.5开始  效率高   线程不安全</p><p>    StringBuffer:JDK1.0开始   效率低    线程安全</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;包装类&quot;&gt;&lt;a href=&quot;#包装类&quot; class=&quot;headerlink&quot; title=&quot;包装类&quot;&gt;&lt;/a&gt;包装类&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是包装类：&lt;br&gt;以前定义变量，经常使用基本数据类型，&lt;br&gt;对于基本数据类型来说，它就是一个数，加点属性，加</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="常用类" scheme="http://example.com/tags/%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java中的异常</title>
    <link href="http://example.com/2022/03/19/Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2022/03/19/Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8/</id>
    <published>2022-03-19T11:34:49.000Z</published>
    <updated>2022-03-18T17:57:37.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常：程序运行中，发生了不正常的现象，阻止了程序的运行，称之为异常。</p><h2 id="异常怎么看"><a href="#异常怎么看" class="headerlink" title="异常怎么看"></a>异常怎么看</h2><p>第一行代表出现的什么异常，最后一行是代码出错的位置，在哪个类第几行。</p><h2 id="处理异常的方式"><a href="#处理异常的方式" class="headerlink" title="处理异常的方式"></a>处理异常的方式</h2><h3 id="通过if-else解决异常"><a href="#通过if-else解决异常" class="headerlink" title="通过if-else解决异常"></a>通过if-else解决异常</h3><p>比如：<br>if(sc.hasNextInt){ //如果输入的是一个int型类型</p><p>}<br>优点：用法简单<br>缺点：代码臃肿，可读性差，业务代码和处理异常的代码混合在一起，需要花费大量时间维护代码，很难堵住所有漏洞</p><h3 id="Java中的异常处理机制"><a href="#Java中的异常处理机制" class="headerlink" title="Java中的异常处理机制"></a>Java中的异常处理机制</h3><p>异常三连：（try-catch-finally）<br>try{<br>    System.out.printf(“正常代码”);<br>}catch(Exception ex){<br>    System.out.printf(“对不起，程序出现异常。”);<br>}<br>    System.out.printf(“异常后的代码可以正常运行”);<br>    原理：把可能出现异常的代码放入try中，然后将异常代码进行输出，被catch后面的（）中的异常对象接收，接收之后，执行catch后面的{}中的代码，然后后面的代码继续正常运行。<br>    try中没有异常，catch中代码不运行。<br>    try中有异常，catch进行捕获。<br>    如果catch中异常类型和你出的异常类型匹配的话，走catch中的代码，进行捕获。<br>    如果catch中异常类型和你出的异常类型不匹配的话，不走catch中的代码，则没有捕获成功，程序相当于出现了异常，中断了，则后续代码不执行。<br>    注意：如果try中出现异常，catch也捕获成功了，则try异常后面的代码不运行；try-catch后面的代码正常运行。<br>catch中的处理方式：<br>1.catch中什么都不写，空代码块<br>2.自定义输出内容，如：程序出现异常<br>3.调用toString方法，ex或者ex.toString()显示异常的类名（全限定路径）<br>4.用ex.getMessage()，显示异常描述的信息对应的字符串，如果没有显示null<br>5.用ex.printStackTrace(),显示异常的堆栈信息，就是将异常信息捕获后，在控制台显示出来，后面代码正常运行，比较常用<br>6.抛出异常，throw ex<br>在什么情况下，try-catch后面的代码不执行：throw抛出异常，catch中没有正常进行捕获，在try中遇到return<br>finally就是为了防止这种情况出现，让异常之后的代码必须正常运行，比如：<br>try{<br>    System.out.printf(“正常代码”);<br>}catch(Exception ex){<br>    System.out.printf(“对不起，程序出现异常。”);<br>}finally{<br>    System.out.printf(“finally中代码必须正常运行”);<br>}<br>异常三连的运行顺序：限制性finally，在执行return。<br>一般什么代码放在finally中：关闭数据库，关闭IO数据流，关闭socket资源<br>有一个代码可以让finally中代码不执行：System.exit(0);//终止当前的虚拟机执行</p><h3 id="多重catch捕获异常"><a href="#多重catch捕获异常" class="headerlink" title="多重catch捕获异常"></a>多重catch捕获异常</h3><p>catch可以写多个，比如：</p><p>try{<br>    System.out.printf(“正常代码”);<br>}catch(InputMismatchException ex){<br>    System.out.printf(“对不起，你录入的数据不是int型数据”);<br>}catch（ArithmeticException ex）{<br>    System.out.printf(“对不起，除数不能为0”);<br>}catch（Exception ex）{<br>    System.out.printf(“对不起，程序出现异常。”);<br>}<br>一旦执行了一条catch语句后，后面的catch则不执行，在安排catch顺序时，一般先写子类异常，后写父类异常。<br>在jdk1.7以后可以用或符号进行连接，如：<br>catch（ArithmeticException ex ｜ InputMismatchException ex）{</p><p>}</p><h2 id="异常的分层，层次结构"><a href="#异常的分层，层次结构" class="headerlink" title="异常的分层，层次结构"></a>异常的分层，层次结构</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E5%BC%82%E5%B8%B8%E5%88%86%E5%B1%82.png"                                     ><br>运行时异常：<br>public class Test5 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //运行时异常：<br>        int[] arr = {1,2,3};<br>        System.out.println(arr.length);<br>        /<em>int[] arr2 = null;<br>        System.out.println(arr2.length);</em>/<br>        System.out.println(arr[10]);<br>    }<br>}<br>检查异常：<br>处理方式1：try-catch嵌套try-catch<br>public class Test6 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //检查异常：<br>        try {<br>            try {<br>                Class.forName(“com.msb.test01.Test”).newInstance();<br>            } catch (InstantiationException e) {<br>                e.printStackTrace();<br>            } catch (IllegalAccessException e) {<br>                e.printStackTrace();<br>            }<br>        } catch (ClassNotFoundException e) {<br>            e.printStackTrace();<br>        }<br>    }<br>}<br>处理方式2：多重catch<br>public class Test6 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //检查异常：<br>        try {<br>            Class.forName(“com.msb.test01.Test”).newInstance();<br>        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {<br>            e.printStackTrace();<br>        }<br>    }<br>}<br>处理方式3：throws<br>public class Test6 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException {<br>        //检查异常：<br>        Class.forName(“com.msb.test01.Test”).newInstance();<br>    }<br>}</p><h1 id="异常分层总结"><a href="#异常分层总结" class="headerlink" title="异常分层总结"></a>异常分层总结</h1><p>！<a href="/images/%E5%BC%82%E5%B8%B8%E6%80%BB.png"></a></p><h1 id="throw和throws"><a href="#throw和throws" class="headerlink" title="throw和throws"></a>throw和throws</h1><p>throw和throws的区别：<br>（1）位置不同：<br>throw：方法内部<br>throws: 方法的签名处，方法的声明处</p><p>（2）内容不同：<br>throw+异常对象（检查异常，运行时异常）<br>throws+异常的类型（可以多个类型，用，拼接）</p><p>（3）作用不同：<br>throw：异常出现的源头，制造异常。<br>throws:在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异常。然后调用者对这个异常进行处理：<br>要么自己处理要么再继续向外抛出异常<br>代码：<br>public class Test7 {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) throws Exception {<br>        //实现一个功能：两个数相除，当除数为0的时候，程序出现异常。<br>        /<em>try {<br>            devide();<br>        } catch (Exception e) {<br>            e.printStackTrace();<br>        }</em>/<br>        devide();<br>    }<br>    public static void devide() throws Exception {<br>        Scanner sc = new Scanner(System.in);<br>        System.out.println(“请录入第一个数：”);<br>        int num1 = sc.nextInt();<br>        System.out.println(“请录入第二个数：”);<br>        int num2 = sc.nextInt();<br>        if(num2 == 0 ){//除数为0 ，制造异常。<br>            //制造运行时异常：<br>            /<em>throw new RuntimeException();</em>/<br>            //制造检查异常：<br>            /<em>try {<br>                throw new Exception();<br>            } catch (Exception e) {<br>                e.printStackTrace();<br>            }</em>/<br>            throw new Exception();<br>        }else{<br>            System.out.println(“商：”+num1/num2);<br>        }<br>    }<br>}</p><h1 id="重载和重写异常的区别"><a href="#重载和重写异常的区别" class="headerlink" title="重载和重写异常的区别"></a>重载和重写异常的区别</h1><p>！<a href="/images/%E9%87%8D%E5%86%99%E5%BC%82%E5%B8%B8.png"></a><br>1.重载：<br>public class Demo {<br>    public void a() throws Exception{<br>    }<br>    public void a(int age) throws ArithmeticException{<br>    }<br>}<br>2.重写<br>public class Person{<br>    public void eat()throws RuntimeException{<br>        System.out.printf(“父类方法”);<br>    }<br>}<br>public class Student extends Person{<br>    public void eat()throws Exception{<br>        System.out.printf(“子类方法”);<br>    }<br>}<br>子类应该&lt;=父类</p><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>自定义的异常可以继承：运行时异常<br>public class MyException extends RuntimeException {</p><pre><code>static final long serialVersionUID = -70348971907L;public MyException()&#123;&#125;public MyException(String msg)&#123;    super(msg);&#125;</code></pre><p>}</p><p>也可以继承检查异常：<br>public class MyException extends Exception {<br>    static final long serialVersionUID = -70348971907L;<br>    public MyException(){<br>    }<br>    public MyException(String msg){<br>        super(msg);<br>    }<br>}<br>如果继承的是运行时异常，那么在使用的时候无需额外处理<br>如果继承的是检查异常，那么使用的时候需要try-catch捕获或者throws向上抛</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h1&gt;&lt;p&gt;异常：程序运行中，发生了不正常的现象，阻止了程序的运行，称之为异常。&lt;/p&gt;
&lt;h2 id=&quot;异常怎么看&quot;&gt;&lt;a href=&quot;#异常怎么看&quot;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="异常" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>面向对象项目练习</title>
    <link href="http://example.com/2022/03/18/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2022/03/18/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/</id>
    <published>2022-03-18T10:27:25.000Z</published>
    <updated>2022-03-18T15:50:48.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目1（购买披萨系统）"><a href="#项目1（购买披萨系统）" class="headerlink" title="项目1（购买披萨系统）"></a>项目1（购买披萨系统）</h1><h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/ps.png"                                     ></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>public class Pizza { //父类披萨<br>    private String name;<br>    private int price;<br>    private int size;</p><pre><code>public Pizza() &#123;&#125;public Pizza(String name, int price, int size) &#123;    this.name = name;    this.price = price;    this.size = size;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getPrice() &#123;    return price;&#125;public void setPrice(int price) &#123;    this.price = price;&#125;public int getSize() &#123;    return size;&#125;public void setSize(int size) &#123;    this.size = size;&#125;@Overridepublic String toString() &#123;    return &quot;披萨的名字：&quot; + name + &quot;\n价格：&quot; + price +&quot;元&quot;+ &quot;\n大小：&quot; + size+&quot;寸&quot;;&#125;</code></pre><p>}<br>public class Bacon extends Pizza{ //培根比萨<br>    private int weight;</p><pre><code>public Bacon() &#123;&#125;public Bacon(String name, int price, int size, int weight) &#123;    super(name, price, size);    this.weight = weight;&#125;public int getWeight() &#123;    return weight;&#125;public void setWeight(int weight) &#123;    this.weight = weight;&#125;@Overridepublic String toString() &#123;    return super.toString()+ &quot;\n培根克数：&quot; + weight+&quot;克&quot;;&#125;</code></pre><p>}<br>public class Fruit extends Pizza{ //水果披萨<br>    private String burdening;</p><pre><code>public Fruit() &#123;&#125;public Fruit(String name, int price, int size, String burdening) &#123;    super(name, price, size);    this.burdening = burdening;&#125;public String getBurdening() &#123;    return burdening;&#125;public void setBurdening(String burdening) &#123;    this.burdening = burdening;&#125;@Overridepublic String toString() &#123;    return super.toString()+&quot;\n配料水果：&quot; + burdening ;&#125;</code></pre><p>}<br>public class PizzaFactory { //披萨工厂<br>    public static Pizza getPizza(int choice){<br>        Pizza pizza = null;<br>        Scanner sc = new Scanner(System.in);<br>        switch (choice){<br>            case 1:{<br>                System.out.println(“请输入需要的培根克数：”);<br>                int weight = sc.nextInt();<br>                System.out.println(“请输入披萨的价格：”);<br>                int price = sc.nextInt();<br>                System.out.println(“请输入披萨的大小：”);<br>                int size = sc.nextInt();<br>                Bacon bp = new Bacon(“培根披萨”,price,size,weight);<br>                pizza = bp;<br>            }<br>            break;<br>            case 2: {<br>                System.out.println(“请输入需要的水果：”);<br>                String burdening = sc.next();<br>                System.out.println(“请输入披萨的价格：”);<br>                int price = sc.nextInt();<br>                System.out.println(“请输入披萨的大小：”);<br>                int size = sc.nextInt();<br>                Fruit fp = new Fruit(“水果披萨”,price,size,burdening);<br>                pizza = fp;<br>            }<br>            break;<br>        }<br>        return pizza;<br>    }<br>}<br>public class Main {<br>    //这是一个main方法，是程序的入口<br>    public static void main(String[] args) {<br>        System.out.println(“请输入你想要购买额披萨：1.培根比萨 2.水果披萨”);<br>        Scanner sc = new Scanner(System.in);<br>        int choice = sc.nextInt();<br>        Pizza pizza = PizzaFactory.getPizza(choice);<br>        System.out.println(pizza.toString());<br>    }<br>}</p><h1 id="项目2（购买饮品）"><a href="#项目2（购买饮品）" class="headerlink" title="项目2（购买饮品）"></a>项目2（购买饮品）</h1><h2 id="项目需求-1"><a href="#项目需求-1" class="headerlink" title="项目需求"></a>项目需求</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/dk.png"                                     ></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>public class Drink { //父类饮料<br>    private String name;<br>    private int price;<br>    private String cup ;<br>    private String remark;//备注<br>    private int num;</p><pre><code>public Drink() &#123;&#125;public Drink(String name, int price, String cup, String remark, int num) &#123;    this.name = name;    this.price = price;    this.cup = cup;    this.remark = remark;    this.num = num;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getPrice() &#123;    return price;&#125;public void setPrice(int price) &#123;    this.price = price;&#125;public String getCup() &#123;    return cup;&#125;public void setCup(String cup) &#123;    this.cup = cup;&#125;public String getRemark() &#123;    return remark;&#125;public void setRemark(String remark) &#123;    this.remark = remark;&#125;public int getNum() &#123;    return num;&#125;public void setNum(int num) &#123;    this.num = num;&#125;@Overridepublic String toString() &#123;    return &quot;订单信息：您购买了：&quot;+name+&quot;：&quot;+remark+&quot;,购买的：&quot;+cup+&quot;，数量是：&quot;+num+&quot;，价格：&quot;+price*num+&quot;元&quot;;&#125;</code></pre><p>}</p><p>public class Cola extends Drink{ //可乐类</p><pre><code>public Cola() &#123;&#125;public Cola(String name, int price, String cup, String remark, int num) &#123;    super(name, price, cup, remark, num);&#125;</code></pre><p>}<br>public class Coffee extends Drink{ //咖啡类</p><pre><code>public Coffee() &#123;&#125;public Coffee(String name, int price, String cup, String remark, int num) &#123;    super(name, price, cup, remark, num);&#125;</code></pre><p>}<br>public class MilkyTea extends Drink{ //奶茶类</p><pre><code>public MilkyTea() &#123;&#125;public MilkyTea(String name, int price, String cup, String remark, int num) &#123;    super(name, price, cup, remark, num);&#125;</code></pre><p>}<br>public class DrinkStore { //饮料商店（工厂）<br>    public static Drink getDrink(int choice){<br>        Drink drink = null;<br>        Scanner sc = new Scanner(System.in);<br>        switch (choice){<br>            case 1:{<br>                System.out.println(“请输入你需要的可乐信息：”+”\n备注要可口可乐还是百事可乐，是否加冰”);<br>                String remark = sc.next();<br>                System.out.println(“选择:中杯 大杯 or 超大杯”);<br>                String cup = sc.next();<br>                System.out.println(“购买数量：”);<br>                int num = sc.nextInt();<br>                Cola cola = new Cola(“可乐”,3,cup,remark,num);<br>                drink = cola;<br>            }break;<br>            case 2:{<br>                System.out.println(“请输入你需要的咖啡信息：”+”\n备注加糖、加奶、都不加，是否加冰”);<br>                String remark = sc.next();<br>                System.out.println(“选择:中杯 大杯 or 超大杯”);<br>                String cup = sc.next();<br>                System.out.println(“购买数量：”);<br>                int num = sc.nextInt();<br>                Coffee coffee = new Coffee(“咖啡”,5,cup,remark,num);<br>                drink = coffee;<br>            }break;<br>            case 3:{<br>                System.out.println(“请输入你需要的奶茶信息：”+”\n备注加椰果、红豆还是布丁，是否加冰”);<br>                String remark = sc.next();<br>                System.out.println(“选择:中杯 大杯 or 超大杯”);<br>                String cup = sc.next();<br>                System.out.println(“购买数量：”);<br>                int num = sc.nextInt();<br>                MilkyTea milkyTea = new MilkyTea(“奶茶”,8,cup,remark,num);<br>                drink = milkyTea;<br>            }break;<br>        }<br>        return drink;<br>    }<br>}<br>public class Main {<br>    //这是一个main方法，是程序的入口<br>    public static void main(String[] args) {<br>        System.out.println(“请输入你想要购买的饮料：1.可乐 2. 咖啡 3.奶茶”);<br>        Scanner sc = new Scanner(System.in);<br>        int choice = sc.nextInt();<br>        Drink drink = DrinkStore.getDrink(choice);<br>        System.out.println(drink.toString());<br>    }<br>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目1（购买披萨系统）&quot;&gt;&lt;a href=&quot;#项目1（购买披萨系统）&quot; class=&quot;headerlink&quot; title=&quot;项目1（购买披萨系统）&quot;&gt;&lt;/a&gt;项目1（购买披萨系统）&lt;/h1&gt;&lt;h2 id=&quot;项目需求&quot;&gt;&lt;a href=&quot;#项目需求&quot; class=&quot;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>成员内部类</title>
    <link href="http://example.com/2022/03/13/%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://example.com/2022/03/13/%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2022-03-13T09:07:50.000Z</published>
    <updated>2022-03-13T09:22:28.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h1><p>一个类的内部的类叫内部类</p><h2 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h2><p>类：属性，方法，构造器，代码块（普通块，静态块，构造块，同步块），内部类<br>内部类：成员内部类和局部内部类（位置：方法块，块内，构造器内）<br>内部类可以有属性，方法，构造器等<br>修饰符可以是pravitae,default,protect,public,abstract<br>内部类可以访问外部类的内容<br>外部类想要访问内部类的东西需要创建对象来进行调用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;成员内部类&quot;&gt;&lt;a href=&quot;#成员内部类&quot; class=&quot;headerlink&quot; title=&quot;成员内部类&quot;&gt;&lt;/a&gt;成员内部类&lt;/h1&gt;&lt;p&gt;一个类的内部的类叫内部类&lt;/p&gt;
&lt;h2 id=&quot;类的组成&quot;&gt;&lt;a href=&quot;#类的组成&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="内部类" scheme="http://example.com/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="http://example.com/2022/03/12/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/12/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-12T09:05:21.000Z</published>
    <updated>2022-03-12T09:05:55.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>定义一个static方法，通过类名直接调用，<br>返回值类型是父类类型，返回的可以是其任意子类类型，<br>传入一个字符串型的参数，工厂根据参数创建对应的子类产品。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>public class PetStore { //动物工厂<br>    public static Animal getAnimal(String petName){ //传入宠物类型<br>    Animal an = null; //初始化an<br>    if(“猫”.equals(petName)){ //把传入的宠物子类类型赋值给父类<br>        an = new Cat();<br>    }<br>    if(“狗”.equals(petName)){<br>        an = new Dog();<br>    }<br>    return an;  //返回父类<br>    }<br>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;&lt;p&gt;定义一个static方法，通过类名直接调用，&lt;br&gt;返回值类型是父类类型，返回的可以是其任意子类类型，&lt;br</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="简单工厂" scheme="http://example.com/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/"/>
    
  </entry>
  
  <entry>
    <title>Object类</title>
    <link href="http://example.com/2022/03/12/Object%E7%B1%BB/"/>
    <id>http://example.com/2022/03/12/Object%E7%B1%BB/</id>
    <published>2022-03-12T08:58:41.000Z</published>
    <updated>2022-03-13T09:06:16.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><p>输出对象名的时候其实调用了toString方法，只不过省略不写了。<br>System.out.print(s)==System.out.print(s.toString())。<br>作用是：<br>返回一个值：getClass().getName()+@+Integer.toHexString(hashCode()) ，<br>比如com.msb.msb5.Student@1b6d3586，包名加类名加@哈希码的无无符号十六进制数<br>hashCode将对象在堆中的地址，进行哈希算法，返回一个码就是哈希码，然后传到Integer.toHexString方法中，返回一个十六进制的数对应的字符串。<br>具体过程：<br>对象在堆中分配了地址，将地址进行哈希操作，转成哈希码，再通过方法转为十六进制的字符串。<br>可以理解为返回一个地址，但是返回出的值的可读性不好，我们想知道对象里具体的内容，而不是十六进制的地址，所以我们对这个方法不满意，要对方法进行重写。<br>比如：<br>public String toString{<br>    retrun “这是一个Student对象，这个对象的名字是：”+name+”，年龄是：”+age+”，身高是：”+height;<br>}<br>基本上我们都要进行重写，可以用IDEA的快捷键：alt+insert然后选toString()。</p><h2 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h2><p>boolean flag = p1.equals(p2);<br>作用：<br>比较两个对象是否一致。<br>== 对于基本数据类型来说，比较的是数值是否相当，对于引用数据类型来说，比较的是两者的地址是否相等。<br>equals方法是提供一个对对象的具体内容是否相等的一个方式，对象内容就是只属性，分类Object类就是==，没有什么具体用法，一般要对这个方法进行重写。<br>比如：<br>public boolean equals(Object obj){<br>    //要将obj转为Phone类型,Phone是自己写的类<br>    Phone other = (Phone)obj;<br>    if(this.getBrand()==other.getBrand()&amp;&amp;this.getPrice()==other.getPrice()){<br>        retrun ture;<br>    }else{<br>        retrun false;<br>    }<br>}<br>在其他类里调用重写的eqalus方法时候，可以用instanceof运算符判断新的类是否为旧类的实体对象，是的话返回true，不是的话返回false。<br>可以用IDEA的快捷键alt+insert，重写eqals方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Object类&quot;&gt;&lt;a href=&quot;#Object类&quot; class=&quot;headerlink&quot; title=&quot;Object类&quot;&gt;&lt;/a&gt;Object类&lt;/h1&gt;&lt;h2 id=&quot;toString-方法&quot;&gt;&lt;a href=&quot;#toString-方法&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="类" scheme="http://example.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>接口</title>
    <link href="http://example.com/2022/03/07/%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2022/03/07/%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-03-07T08:59:57.000Z</published>
    <updated>2022-03-13T08:59:15.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>定义规则，但是不同于抽象类，他是接口不是类，接口定义好规则后，实现类负责实现即可</p><h2 id="继承和接口："><a href="#继承和接口：" class="headerlink" title="继承和接口："></a>继承和接口：</h2><p>继承：子类堆父类的继承<br>实现：实现类对接口的实现<br>eg：<br>手机 是不是 照相机<br>继承： 手机 extends 照相机 = （xx是xx）世纪是一个照相机<br>实现：手机 implements 拍照功能 = （xx有xx的功能）手机有一个照相的功能</p><h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><p> 1.类试试类，接口是接口，他们是同一层次的概念<br> 2.接口中没有构造器<br> 3.声明接口：Interface<br> 4.在JDK1.8中灭苦中只有两部分内容<br> （1）常量:固定修饰符：public static final<br> （2）抽象方法：固定修饰符：public abstract<br>  在JDK1.8之后新增了非抽象方法<br>  （1）被public default修饰的非抽象方法<br>  （2）静态方法<br> 5.类和接口之间的关系：实现的关系，类实现接口：<br> 6.一旦实现一个接口，那么实现类要重写接口中的全部抽象方法<br> 7.如果没有全部重写方法，则把类变为抽象类<br> 8.java只有单继承，java还有多实现:<br> 一个类继承其他类，只能继承一个父类<br> 实现接口，可以实现多个接口<br> 9.写法：先继承后实现，比如：class Student extends Person implements TestInterface01,TestInterface02<br> 10.接口不能创建对象，接口可以指向实现类</p><h2 id="多态的应用场合"><a href="#多态的应用场合" class="headerlink" title="多态的应用场合"></a>多态的应用场合</h2><p>1.父类当作方法的形参，传入具体的子类的对象<br>2.父类当作方法的返回值，返回的是具体的子类的对象<br>3.接口当作方法的形参，传入具体的实现类的对象<br>4.接口当作方法的返回值，返回的具体的实现类对象</p><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类使用abstract修饰；不能被实例化，即不能用new关键字实例化对象；含有抽象方法的类是抽象类，必须用abstract关键字修饰；抽象类可以含有抽象方法，也可以不包括抽象方法，抽象类中可以有具体的方法；如果一个子类实现了父类，的所有抽象方法，那么该子类可以不必是抽象类，否则就是抽象类；抽象类中的抽象方法只有方法体，没有具体实现。</p><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><p>接口使用interface修饰；接口不能被实例化；一个类可以实现多个接口；接口中的方法都是抽象方法；接口中不能包括实例域或静态方法（静态方法必须被实现，接口中都是抽象方法，不能被实现）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;p&gt;定义规</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="接口" scheme="http://example.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java三大特性</title>
    <link href="http://example.com/2022/03/07/Java%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2022/03/07/Java%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</id>
    <published>2022-03-07T08:24:01.000Z</published>
    <updated>2022-03-12T09:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java的三大特性"><a href="#Java的三大特性" class="headerlink" title="Java的三大特性"></a>Java的三大特性</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="封装的概念"><a href="#封装的概念" class="headerlink" title="封装的概念"></a>封装的概念</h3><p>封装是把过程和数据包围起来，对数据的访问只能通过已定义的接口。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。封装是一种信息隐藏技术，在Java中通过关键字private,protected和public实现封装。<br>封装把对象的所有组成部分组合在一起，封装定义程序如何引用对象的数据，实际上使用方法将类的数据隐藏起来，控制用户对类的修改和访问数据的程度。适当的封装可以让程式码更容易理解和维护，也加强了程式码的安全性。<br>简单说封装将某些东西进行隐藏，然后提供相应的方式进行获取。</p><h3 id="高内聚，低耦合"><a href="#高内聚，低耦合" class="headerlink" title="高内聚，低耦合"></a>高内聚，低耦合</h3><p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉。<br>低耦合：仅对外暴露少量的方法用于使用。<br>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。</p><h3 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h3><p>封装可以提高代码的安全性。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>public class Girl {<br>    private int age;</p><pre><code>public int getage()&#123;    return age;</code></pre><p>}</p><pre><code>public void setage(int age) &#123;    if (age &gt;= 30) &#123;        this.age = 18;    &#125; else &#123;        this.age = age;    &#125;&#125;</code></pre><p>}</p><p>public class Test {<br>    public static void main(String[] args) {<br>    Girl g = new Girl();<br>    g.setage(31);<br>    System.out.println(g.getage());<br>    }<br>}</p><p>上面的代码，对于属性age来说，加了修饰符private,这样外界对他的访问就受到了限制，现在我还想再加上其他的限制条件，但是在属性本身上没有办法再加了，所以我们通过定义方法进行限制条件的添加。<br>（1）将属性私有化，被private修饰<br>（2）提供了public修饰符的方法可以让别人来访问<br>（3）即使外界可以通过方法来访问属性，但是也不能随意访问，因为我们可以在方法中添加限制条件。<br>IDEA中可以用快捷键alt+insert来进行自动添加set，get方法。<br>注意：如果改了set，get方法的话，创建构造器后最好调用方法，不然容易出错。</p><h2 id="继承-extends"><a href="#继承-extends" class="headerlink" title="继承 extends"></a>继承 extends</h2><h3 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h3><p>类是对对象的抽象，继承是对类的抽象。<br>举例：<br>学生类：<br>属性：姓名，年龄，身高，学生编号<br>方法：吃饭，睡觉，学习</p><p>老师类：<br>属性：姓名，年龄，身高，教师编号<br>方法：吃饭，睡觉，教学</p><p>员工类：<br>属性：姓名，年龄，身高，员工编号<br>方法：吃饭，睡觉，工作</p><p>把共同的东西抽象为一个新的类：<br>人类：<br>属性：姓名，年龄，身高<br>方法：吃饭，睡觉<br>学生类，教师类，员工类都继承自人类</p><p>写代码时候先定义人类</p><p>人类： –&gt; 父类</p><p>属性：姓名，年龄，身高<br>方法：吃饭，睡觉</p><p>再定义： –&gt; 子类</p><p>学生类：<br>属性：学生编号<br>方法：学习<br>教师类：<br>属性：教师编号<br>方法：教学<br>员工类：<br>属性：员工编号<br>方法：工作<br>子类继承自父类，这种继承关系，是在合理的范围中的抽取，抽取出子类父类的关系。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>public class Person {<br>    private int age;<br>    private String name;<br>    private double hight;</p><pre><code>public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public double getHight() &#123;    return hight;&#125;public void setHight(double hight) &#123;    this.hight = hight;&#125;public void eat()&#123;&#125;public void sleep()&#123;&#125;</code></pre><p>}</p><p>public class Student extends Person{//子类Student 继承 父类<br>    private int sno;//学号</p><pre><code>public int getSno() &#123;    return sno;&#125;public void setSno(int sno) &#123;    this.sno = sno;&#125;public void study()&#123;    System.out.println(&quot;学生可以学习&quot;);&#125;</code></pre><p>}</p><p>public class Test {<br>    public static void main(String[] args) {<br>    Student s1 = new Student();<br>    s1.setSno(1001);<br>    s1.setAge(15);<br>    s1.setHight(178.5);<br>    s1.setName(“李立”);<br>        System.out.println(“姓名：”+s1.getName()+”年龄：”+s1.getAge()+”身高为：”+s1.getHight()+”学号：”+s1.getSno());<br>    }<br>}<br>提高了代码的复用性，不用重复定义<br>注意：父类的private修饰的内容，子类实际上也继承了，子类不能直接调用，但是通过set，get方法可以间接的调用。</p><h3 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h3><p>(1)提高了代码的复用性，不用重复定义<br>(2)便于代码的扩展<br>(3)为了以后多态的使用，是多态的前提。<br>注意：一个父类可以有多个子类，一个子类只能直接的继承于一个父类，但是继承具有传递性，可以间接的继承其他类。</p><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>private 私有的，只在当前类里有效<br>default 省略的，同一个类和包都可以访问<br>protected 同一个类，包和子类可以访问<br>public 所有的地方多可以访问<br>属性，方法：修饰符：四种都可以用<br>类：修饰符：可以用省略的或者public<br>一般属性用private，方法用public</p><h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><p>发生在子类和父类中，当父类提供的方法不满意时，要对父类的方法进行重写。<br>格式要求：子类和父类的方法名，参数列表（个数，顺序，类型）必须一样</p><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><p>重载发生在同一个类中，方法名一样，形参列表不同的时候<br>重写发生在不同类，子类对父类的方法进行重写。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E9%87%8D%E5%86%99%E9%87%8D%E8%BD%BD%E5%8C%BA%E5%88%AB.png"                                     ></p><h2 id="super修饰符"><a href="#super修饰符" class="headerlink" title="super修饰符"></a>super修饰符</h2><p>super指的是父类，通常情况下可以省略，当属性或者方法重复时，访问父类必须写super。和this用法类似。<br>super还可以修饰构造器，调用父类的构造器，一般省略不写。要放在第一行，所以super和this不能同时调用构造器。<br>IDEA中写构造器可以用快捷键，alt+insert</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>先写子类，然后抽象出共同点为父类，叫泛化</p><h3 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h3><p>多态即使多种状态，同一个行为，不同的子类表现出来的不同的形态。<br>多态指的就是同一个方法调用，然后用于对象不同会产生不同的行为。<br>好处：为了提高代码的扩展性，符合面向对象原则（开闭原则-扩展是开放的，修改是关闭的）。但是虽然扩展性没有达到最好，还有反射可以吧扩展性达到最好。<br>多态的三个要素：继承，重写，父类引用指向子类对象。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>public class Animal {<br>    public void shout(){<br>        System.out.println(“我是动物，我可以叫”);<br>    }<br>}<br>public class Cat extends Animal{<br>    public void shout(){<br>        System.out.println(“我是小猫，我可以喵喵叫”);<br>    }<br>    public void scratch(){<br>        System.out.println(“我是小猫，我可以挠人”);<br>    }<br>}<br>public class Dog extends Animal{<br>    public void shout(){<br>        System.out.println(“我是小狗，我可以叫”);<br>    }<br>    public  void guard(){<br>        System.out.println(“我是小狗，我可以保护主人”);<br>    }<br>}<br>public class Girl {<br>    public void play(Animal an){<br>        an.shout();<br>    }<br>}<br>public class Test {<br>    public static void main(String[] args) {<br>        Girl g = new Girl();<br>        Cat c = new Cat();<br>        Dog d = new Dog();<br>        Animal an = d;<br>        g.play(an);<br>    }<br>}<br>上面的代码中，是一种常见的应用场景，父类当方法的形参，传入的是具体的子类的对象，然后调用同一个方法，根据传入的子类的不同展现出来的效果也不同，构成了多态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java的三大特性&quot;&gt;&lt;a href=&quot;#Java的三大特性&quot; class=&quot;headerlink&quot; title=&quot;Java的三大特性&quot;&gt;&lt;/a&gt;Java的三大特性&lt;/h1&gt;&lt;h2 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="特性" scheme="http://example.com/tags/%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>final修饰符</title>
    <link href="http://example.com/2022/03/07/final%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://example.com/2022/03/07/final%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2022-03-07T08:23:04.000Z</published>
    <updated>2022-03-07T08:23:38.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><p>可以修饰变量<br>public class Test {<br>    public static void main(String[] args) {<br>        final int a = 10; //final 修饰变量，变量的值不可以改变，常量变为看了一个字符常量，规定常名字要大写。<br>        final Dog d =new Dog(); //地址值不变，对象的属性仍然可以改变<br>        final Dog d2 = new Dog();<br>        a(d2);<br>        b(d2);<br>    }<br>    public static void a(Dog d){<br>        d= new Dog(); // d的指向可以被改变<br>    }<br>    public static void b(final Dog d){<br>        d= new Dog(); // d被final修饰了，指向不能被改变<br>    }<br>}</p><p>修饰方法<br>public class Person {<br>    final public void eat(){<br>        System.out.println(“吃饭”);<br>    }<br>}<br>class Student extends Person{<br>    public void eat(){ //方法不能被重写<br>        super.eat();<br>    }<br>}</p><p>修饰类<br>public final class Person { //final修饰类，此类不能被继承<br>     public void eat(){<br>        System.out.println(“吃饭”);<br>    }<br>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;final&quot;&gt;&lt;a href=&quot;#final&quot; class=&quot;headerlink&quot; title=&quot;final&quot;&gt;&lt;/a&gt;final&lt;/h1&gt;&lt;p&gt;可以修饰变量&lt;br&gt;public class Test {&lt;br&gt;    public static void ma</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="修饰符" scheme="http://example.com/tags/%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>抽象类</title>
    <link href="http://example.com/2022/03/07/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>http://example.com/2022/03/07/%E6%8A%BD%E8%B1%A1%E7%B1%BB/</id>
    <published>2022-03-07T08:20:08.000Z</published>
    <updated>2022-03-07T08:22:27.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h1><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>抽象类中可以定义0-n个抽象方法</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>在抽象类中定义抽象方法，目的是为了给子类提供一个通用的模板。子类可以在模板的基础上进行开发，西安重写父类的抽象方法，然后可以扩展子类自己的技能，抽象类设计避免了子类设计的随意性，通过抽象类，子类的设计变得更加严格，进行某种程度上的限制。使子类更加的通用。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>public abstract class Person {<br>    //一个类中如果有抽象方法，则这个类也要变成一个抽象类,一个抽象类中可以有0-n个抽象方法<br>    //在一个类中，会有一类方法，子类对这个方法非常满意，无需重写，直接使用<br>    public void eat(){<br>        System.out.println(“吃饭”);<br>    }<br>    //在一个类中，子类对这个方法永远不满意，会对这个方法进行重写<br>    public abstract void say();//一个方法去掉方法体，然后用abstract修饰，那么这个方法就变成了一个抽象方法<br>    public abstract void sleep();<br>}<br>//抽象类可以被其他类继承<br>//一个类继承一个抽象类，那么这个类可以变成抽象类<br>//一般子类不会加abstract修饰，一般让子类重写父类中的抽象方法<br>class Student extends Person{<br>    @Override<br>    public void say() {<br>        System.out.println(“我喜欢说话”);<br>    }</p><pre><code>@Override //子类继承抽象类，就必须重写全部的抽象方法，子类如果没有重写父类的全部抽象方法，那么子类也可以变成一个抽象类public void sleep() &#123;    System.out.println(&quot;我喜欢睡觉&quot;);&#125;</code></pre><p>}<br>class Demo{<br>    public static void main(String[] args) {<br>        //创建抽象类的对象–&gt;抽象类不可以创建对象<br>        //创建子类对象<br>        Student s = new Student();<br>        s.say();<br>        s.sleep();<br>    }<br>}</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1.抽象类中一定有构造器，构造器的作用是给子类初始化对象的时候要西安super调用父类的构造器<br>2.抽象方法不能被final修饰，因为抽象类设计的初衷就是给子类继承用的，要是被final修饰了，就不存在继承了，没有子类了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;抽象类和抽象方法&quot;&gt;&lt;a href=&quot;#抽象类和抽象方法&quot; class=&quot;headerlink&quot; title=&quot;抽象类和抽象方法&quot;&gt;&lt;/a&gt;抽象类和抽象方法&lt;/h1&gt;&lt;h2 id=&quot;关系&quot;&gt;&lt;a href=&quot;#关系&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="类" scheme="http://example.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java中的内存分析</title>
    <link href="http://example.com/2021/12/23/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/12/23/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</id>
    <published>2021-12-23T11:34:49.000Z</published>
    <updated>2021-12-23T13:36:06.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h1><p>栈、堆、方法区<br> {<br>    int id;<br> int age;<br> person p1 = new person();<br> }<br> 局部变量，方法在栈里，创建的对象在堆里。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this关键字 用法：<br>1.this可以修饰属性：<br>总结：当属性名字和形参发生重名的时候，或者  属性名字 和局部变量重名的时候，都会发生就近原则，所以如果我要是直接使用变量名字的话就指的是离的近的那个形参或者局部变量，这时候如果我想要表示属性的话，在前面要加上：this.修饰<br>如果不发生重名问题的话，实际上你要是访问属性也可以省略this.<br> {<br>  public class Person {<br>    //属性<br>    int age;<br>    String name;<br>    double height;<br>    //空构造器<br>    public Person(){<br>    }<br>    //有参构造器<br>    public Person(int age,String name,double height){<br>        this.age = age;<br>        this.name = name;<br>        this.height = height;<br>    }<br>    //方法：<br>    public void eat(){<br>        int age = 10;<br>        System.out.println(age);//就近原则，age指的是离它近的age–》局部变量的age<br>        System.out.println(this.age);//这里指代的就是属性的age<br>        System.out.println(“我喜欢吃饭”);<br>    }<br> }<br>2.this修饰方法：<br>总结：在同一个类中，方法可以互相调用，this.可以省略不写。<br> {<br>  public class Person {<br>    //属性<br>    int age;<br>    String name;<br>    double height;<br>    //空构造器<br>    public Person(){<br>    }<br>    //有参构造器<br>    public Person(int age,String name,double height){<br>        this.age = age;<br>        this.name = name;<br>        this.height = height;<br>    }<br>    //方法：<br>    /<em>public void eat(){<br>        int age = 10;<br>        System.out.println(age);//就近原则，age指的是离它近的age–》局部变量的age<br>        System.out.println(this.age);//这里指代的就是属性的age<br>        System.out.println(“我喜欢吃饭”);<br>    }</em>/<br>    public void play(){<br>        /<em>this.</em>/eat();<br>        System.out.println(“上网”);<br>        System.out.println(“洗澡”);<br>    }<br>    public void eat(){<br>        System.out.println(/<em>this.</em>/age);<br>        System.out.println(“吃饭”);<br>    }<br> }<br>3.this可以修饰构造器：<br>总结：同一个类中的构造器可以相互用this调用，注意：this修饰构造器必须放在第一行<br> {<br>    public class Person {<br>    //属性<br>    int age;<br>    String name;<br>    double height;<br>    //空构造器<br>    public Person(){<br>    }<br>    //有参构造器<br>    public Person(int age,String name,double height){<br>        this(age,name);<br>        this.height = height;<br>    }<br>    public Person(int age,String name){<br>        this(age);<br>        this.name = name;<br>    }<br>    public Person(int age){<br>        this.age = age;<br>    }<br>    //方法：<br>    /<em>public void eat(){<br>        int age = 10;<br>        System.out.println(age);//就近原则，age指的是离它近的age–》局部变量的age<br>        System.out.println(this.age);//这里指代的就是属性的age<br>        System.out.println(“我喜欢吃饭”);<br>    }</em>/<br>    public void play(){<br>        /<em>this.</em>/eat();<br>        System.out.println(“上网”);<br>        System.out.println(“洗澡”);<br>    }<br>    public void eat(){<br>        System.out.println(/<em>this.</em>/age);<br>        System.out.println(“吃饭”);<br>    }<br> }</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>static可以修饰：属性，方法，代码块，内部类。<br>1.static修饰属性<br> {<br>  public class Test {<br>    //属性：<br>    int id;<br>    static int sid;<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //创建一个Test类的具体的对象<br>        Test t1 = new Test();<br>        t1.id = 10;<br>        t1.sid = 10;<br>        Test t2 = new Test();<br>        t2.id = 20;<br>        t2.sid = 20;<br>        Test t3 = new Test();<br>        t3.id = 30;<br>        t3.sid = 30;<br>        //读取属性的值：<br>        System.out.println(t1.id);<br>        System.out.println(t2.id);<br>        System.out.println(t3.id);<br>        System.out.println(t1.sid);<br>        System.out.println(t2.sid);<br>        System.out.println(t3.sid);<br>    }<br> }<br>static修饰属性总结：<br>（1）在类加载的时候一起加载入方法区中的静态域中<br>（2）先于对象存在<br>（3）访问方式： 对象名.属性名    类名.属性名（推荐）<br>static修饰属性的应用场景：某些特定的数据想要在内存中共享，只有一块 –》这个情况下，就可以用static修饰的属性</p><h2 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h2><p> {<br>  public class Demo {<br>    int id;<br>    static int sid;<br>    public void a(){<br>        System.out.println(id);<br>        System.out.println(sid);<br>        System.out.println(“——a”);<br>    }<br>    //1.static和public都是修饰符，并列的没有先后顺序，先写谁后写谁都行<br>    static public void b(){<br>        //System.out.println(this.id);//4.在静态方法中不能使用this关键字<br>        //a();//3.在静态方法中不能访问非静态的方法<br>        //System.out.println(id);//2.在静态方法中不能访问非静态的属性<br>        System.out.println(sid);<br>        System.out.println(“——b”);<br>    }<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //5.非静态的方法可以用对象名.方法名去调用<br>        Demo d = new Demo();<br>        d.a();<br>        //6.静态的方法可以用   对象名.方法名去调用  也可以 用  类名.方法名 （推荐）<br>        Demo.b();<br>        d.b();<br>    }<br> }</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>类的组成：属性，方法，构造器，代码块，内部类<br>代码块分类：普通块，构造块，静态块，同步块（多线程）<br>代码：<br> {<br>  public class Test {<br>    //属性<br>    int a;<br>    static int sa;<br>    //方法<br>    public void a(){<br>        System.out.println(“—–a”);<br>        {<br>            //普通块限制了局部变量的作用范围<br>            System.out.println(“这是普通块”);<br>            System.out.println(“—-000000”);<br>            int num = 10;<br>            System.out.println(num);<br>        }<br>        //System.out.println(num);<br>        //if(){}<br>        //while(){}<br>    }<br>    public static void b(){<br>        System.out.println(“——b”);<br>    }<br>    //构造块<br>    {<br>        System.out.println(“——这是构造块”);<br>    }<br>    //静态块<br>    static{<br>        System.out.println(“—–这是静态块”);<br>        //在静态块中只能方法：静态属性，静态方法<br>        System.out.println(sa);<br>        b();<br>    }<br>    //构造器<br>    public Test(){<br>        System.out.println(“这是空构造器”);<br>    }<br>    public Test(int a){<br>        this.a = a;<br>    }<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        Test t = new Test();<br>        t.a();<br>        Test t2 = new Test();<br>        t2.a();<br>    }<br> }<br>总结：<br>代码块执行顺序：<br>最先执行静态块，只在类加载的时候执行一次，所以一般以后实战写项目：创建工厂，数据库的初始化信息都放入静态块。<br>一般用于执行一些全局性的初始化操作。<br>再执行构造块，（不常用）<br>再执行构造器，<br>再执行方法中的普通块</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>包的作用：<br>为了解决重名问题（实际上包对应的就是盘符上的目录），解决权限问题。<br>创建包<br>包名定义：<br>（1）名字全部小写<br>（2）中间用.隔开<br>（3）一般都是公司域名倒着写 ：  com.jd   com.msb<br>（4）加上模块名字：<br> com.jd.login    com.jd.register<br>（5）不能使用系统中的关键字：nul,con,com1—com9…..<br>（6）包声明的位置一般都在非注释性代码的第一行：<br>总结：<br>（1）使用不同包下的类要需要导包： import **.<em>.</em>;  例如：import java.util.Date;<br>（2）在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。<br>（3）同一个包下的类想使用不需要导包，可以直接使用。<br>（4）在java.lang包下的类，可以直接使用无需导包：<br>（5）IDEA中导包快捷键：alt+enter<br>    可以自己设置自动导包<br>（6）可以直接导入*：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内存分析&quot;&gt;&lt;a href=&quot;#内存分析&quot; class=&quot;headerlink&quot; title=&quot;内存分析&quot;&gt;&lt;/a&gt;内存分析&lt;/h1&gt;&lt;p&gt;栈、堆、方法区&lt;br&gt; {&lt;br&gt;    int id;&lt;br&gt; int age;&lt;br&gt; person p1 = new </summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="内存分析" scheme="http://example.com/tags/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://example.com/2021/12/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2021/12/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-12-23T10:56:58.000Z</published>
    <updated>2021-12-23T11:34:25.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向过程和面向对象的区别"><a href="#面向过程和面向对象的区别" class="headerlink" title="面向过程和面向对象的区别"></a>面向过程和面向对象的区别</h1><p>面向过程：当事件比较简单的时候，利用面向过程，注重的是事件的具体的步骤/过程，注重的是过程中的具体的行为，以函数为最小单位，考虑怎么做。<br>面向对象：注重找“参与者”,将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。<br>案例：<br>人把大象装进冰箱：<br>面向过程：<br>函数1：打开冰箱(){人站在冰箱前，打开冰箱，冰箱卡到30度角的时候，冰箱的灯打开了………}<br>函数2：储存大象(){大象先迈左腿，再迈右退，考虑冰箱能不能装下……}<br>函数3：关闭冰箱(){人站在冰箱前，关闭冰箱，冰箱开到30度角的时候，冰箱的灯关闭了……….}</p><p>面向对象：<br>人{<br>打开(冰箱){<br>冰箱.打开();<br>}</p><p>存储(大象){<br>        大象.进入();<br>}</p><p>关闭(冰箱){<br>冰箱.关闭();<br>}<br>}</p><p>冰箱{<br>打开（）{ 1.2.3.}<br> 关闭（）{}<br>}</p><p>柜子{</p><p>}</p><p>大象{<br>进入(冰箱){<br>}<br>}<br>面向过程 —&gt; 面向对象 , 其实就是由执行者 —&gt; 指挥者的 一个过渡</p><h1 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h1><p>1.万事万物皆对象，身边所有的事物都是对象<br>2.对象：具体的事物，具体的实体，具体的实例，模板下具体的产品<br>  类：对对象向上抽取出像的部分，公共的部分，形成类，类是抽象的，是一个模板。<br>相当于类是有相同特征的对象的集合。<br>3.一般在写代码的时候先写类，然后在根据类创建对应的对象。</p><h1 id="面向对象的三个阶段"><a href="#面向对象的三个阶段" class="headerlink" title="面向对象的三个阶段"></a>面向对象的三个阶段</h1><p>1.面向对象分析OOA  –  Object Oriented Analysis<br>对象：张三，王五，朱六，你，我<br>抽取出一个类—-》人类<br>类里面有什么：<br>动词–》动态特性–》方法<br>名词–》静态特性–》属性<br>2.面向对象设计OOD  –  Object Oriented Design<br>先有类，再有对象：<br>类：人类： Person<br>对象：zhangsan ，lisi，zhuliu<br>3.面向对象编程OOP  –  Object Oriented Programming</p><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p>1）属性（field 成员变量）<br>属性用于定义该类或该类对象包含的数据或者说静态特征。属性作用范围是整个类体。<br>属性定义格式：<br>[修饰符]  属性类型  属性名 = [默认值] ;</p><p>（2）方法<br>方法用于定义该类或该类实例的行为特征和功能实现。方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。<br>方法定义格式：<br>[修饰符]  方法返回值类型  方法名(形参列表) {<br>        // n条语句<br>}<br>void代表没有返回值；方法的作用：重用代码，封装功能，便于修改。<br>代码：<br>public class Person {<br>    //名词—》属性—》成员变量—》放在类中方法外（注意：我们只把有需要的内容写到代码里，不相关的东西不要放在代码中）<br>    int age ;//年龄<br>    String name;//姓名<br>    double height;//身高<br>    double weight;//体重<br>    //动词—》方法<br>    //吃饭<br>    public void eat(){<br>        int num = 10;//局部变量：放在方法中<br>        System.out.println(“我喜欢吃饭”);<br>    }<br>    //睡觉：<br>    public void sleep(String address){<br>        System.out.println(“我在”+address+”睡觉”);<br>    }<br>    //自我介绍：<br>    public String introduce(){<br>        return “我的名字是：”+name+”，我的年龄是：”+age+”,我的身高是：”+height+”,我的体重是：”+weight;<br>    }<br>}</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>public class Test {//测试类<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //创建一个人类的具体的对象/实例：<br>        //创建一个对象，对象的名字叫：zs<br>        //Person 属于 引用数据类型<br>        //第一次加载类的时候，会进行类的加载，初始化创建对象的时候，对象的属性没有给赋值，有默认的初始化的值。<br>        Person zs = new Person();<br>        zs.name = “张三”;<br>        zs.age = 19;<br>        zs.height = 180.4;<br>        zs.weight = 170.4;<br>        //再创建一个对象：<br>        //再次创建类的时候，就不会进行类的加载了，类的加载只在第一次需要的时候加载一次<br>        Person ls = new Person();<br>        ls.name = “李四”;<br>        ls.age = 18;<br>        ls.height = 170.6;<br>        ls.weight = 160.5;<br>        //对属性值进行读取：<br>        System.out.println(zs.name);<br>        System.out.println(ls.age);<br>        //对方法进行操作：<br>        //不同的对象，属性有自己的特有的值，但是方法都是调用类中通用的方法。<br>        //属性：各个对象的属性是独立的，<br>        //方法：各个对象的方法是共享的。<br>        zs.eat();<br>        ls.eat();<br>        zs.sleep(“教室”);<br>        /<em>String str = zs.introduce();<br>        System.out.println(str);</em>/<br>        System.out.println(zs.introduce());<br>    }<br>}</p><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>public class Test {<br>    //这是一个main方法，是程序的入口：<br>    public static void main(String[] args) {<br>        //创建一个Person类的具体的对象/实例/实体：<br>        /*<br>        创建对象的过程：<br>        1.第一次遇到Person的时候，进行类的加载（只加载一次）<br>        2.创建对象，为这个对象在堆中开辟空间<br>        3.为对象进行属性的初始化动作<br>        new关键字实际上是在调用一个方法，这个方法叫构造方法（构造器）<br>        调用构造器的时候，如果你的类中没有写构造器，那么系统会默认给你分配一个构造器，只是我们看不到罢了。<br>        可以自己显式 的将构造器编写出来：<br>        构造器的格式：<br>        [修饰符] 构造器的名字(){<br>        }<br>        构造器和方法的区别：<br>        1.没有方法的返回值类型<br>        2.方法体内部不能有return语句<br>        3.构造器的名字很特殊，必须跟类名一样<br>        构造器的作用：不是为了创建对象，因为在调用构造器之前，这个对象就已经创建好了，并且属性有默认的初始化的值。<br>        调用构造器的目的是给属性进行赋值操作的。<br>        注意：我们一般不会在空构造器中进行初始化操作，因为那样的话每个对象的属性就一样了。<br>        实际上，我们只要保证空构造器的存在就可以了，里面的东西不用写<br>         */<br>        Person p = new Person();<br>        System.out.println(p.age);<br>        System.out.println(p.name);<br>        System.out.println(p.height);<br>        Person p2 = new Person();<br>        System.out.println(p2.age);<br>        System.out.println(p2.name);<br>        System.out.println(p2.height);<br>    }<br>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面向过程和面向对象的区别&quot;&gt;&lt;a href=&quot;#面向过程和面向对象的区别&quot; class=&quot;headerlink&quot; title=&quot;面向过程和面向对象的区别&quot;&gt;&lt;/a&gt;面向过程和面向对象的区别&lt;/h1&gt;&lt;p&gt;面向过程：当事件比较简单的时候，利用面向过程，注重的是事件的</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="面向对象" scheme="http://example.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>IDEA</title>
    <link href="http://example.com/2021/12/23/IDEA/"/>
    <id>http://example.com/2021/12/23/IDEA/</id>
    <published>2021-12-23T10:46:00.000Z</published>
    <updated>2021-12-23T10:55:19.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h1><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。编程开发软件将编辑、编译、调试等功能集成在一个桌面环境中,这样就大大方便了用户。<br>优点<br>节省时间和精力。IDE的目的就是要让开发更加快捷方便，通过提供工具和各种性能来帮助开发者组织资源，减少失误，提供捷径。<br>建立统一标准。当一组程序员使用同一个开发环境时，就建立了统一的工作标准，当IDE提供预设的模板，或者不同团队分享代码库时，这一效果就更加明显了。<br>管理开发工作。首先，IDE提供文档工具，可以自动输入开发者评论，或者迫使开发者在不同区域编写评论。其次，IDE可以展示资源，更便于发现应用所处位置，无需在文件系统里面艰难的搜索。<br>缺点<br>学习曲线问题。IDE基本上是比较复杂的工具，为了更好的熟练使用，需要一定的时间和耐心。<br>初学者的困难。对初学者来说，使用IDE来学习开发有相当的难度，不适合学习一种新语言时使用。<br>无法修复坏代码或设计。开发者不能完全依赖工具的便捷，还是必须保持专业水准和熟练度，开发的成果好坏主要还是看开发员的技术。</p><h1 id="JetBrains公司"><a href="#JetBrains公司" class="headerlink" title="JetBrains公司"></a>JetBrains公司</h1><p>JetBrains公司介绍：<br>JetBrains是一家捷克的软件开发公司，该公司位于捷克的布拉格，并在俄罗斯的圣彼得堡及美国麻州波士顿都设有办公室，该公司最为人所熟知的产品是Java编程语言开发撰写时所用的集成开发环境：IntelliJ IDEA。公司旗下还有其它产品，比如：<br>WebStorm: 用于开发JavaScript、HTML5、 CS3等前端技术;<br>PyCharm: 用于开发python（python语言热度排行榜排名第一，在人工智能大数据领域应用）<br>PhpStorm: 用于开发PHP<br>RubyMine: 用于开发Ruby/Rails<br>AppCode: 用于开发Objective - C/Swift,替换xcode的<br>CLion: 用于开发C/C++<br>DataGrip: 用于开发数据库和SQL<br>Rider: 用于开发.NET<br>GoLand: 用于开发Go（区块链主流开发语言就是Go语言）<br>官网：<a class="link"   href="https://www.jetbrains.com/" >https://www.jetbrains.com/<i class="fas fa-external-link-alt"></i></a></p><h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><p>IDEA 全称IntelliJ IDEA，是用于java语言开发的集成环境IDE(Integrated Development Environment)，也可用于其他语言。<br>IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。<br>IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。<br>IDEA的支持<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/idea1.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/idea2.png"                                     ><br>IDEA的优势（相对于Eclipse）<br>1.强大的整合能力。比如: Git、 Maven、 Spring 等<br>2.提示功能的快速、便捷<br>3.提示功能的范围广<br>4.好用的快捷键和代码模板<br>5.精准搜索</p><h1 id="IDEA和Eclipse的区别"><a href="#IDEA和Eclipse的区别" class="headerlink" title="IDEA和Eclipse的区别"></a>IDEA和Eclipse的区别</h1><p>在Eclipse中我们有Workspace (工作空间)和Project (工程)的概念，在IDEA中只有Project (工程)和Module (模块)的概念。<br>这里的对应关系为:<br>IDEA官网说明:<br>Eclipse中 workspace 相当于 IDEA中的Project<br>Eclipse中   Project     相当于 IDEA中的Module<br>在IntelliJ IDEA中Project(工程) 是最顶级的级别，次级别是Module(模块)。<br>一个Project下可以有多个Module。<br>从Eclipse 转过来的人总是下意识地要在同一个窗口管理n个项目，这在Intellij IDEA是无法做到的。Intellij IDEA提供的解决方案是打开多个项目实例，即打开多个项目窗口。即:一个Project 打开一个Window窗口。<br>IDEA这样设置的原因：<br>目前主流的大型项目都是分布式部署的，结构都是类似这种多Module的。<br>这类项目一般是这样划分的，比如: 积分模块、任务模块、活动模块等等，模块之间彼此可以相互依赖。这些Module之间都是处于同一个项目业务下的模块，彼此之间是有不可分割的业务关系的。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/idea3.png"                                     ></p><h1 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h1><p>1.创建内容：alt+insert<br>2.main方法：psvm<br>3.输出语句：sout<br>4.复制行：ctrl+d<br>5.删除行：ctrl+y<br>6.代码向上/下移动：Ctrl + Shift + Up / Down<br>7.搜索类：  ctrl+n<br>8.生成代码  ：alt + Insert（如构造函数等，getter,setter,hashCode,equals,toString）<br>9.百能快捷键 : alt + Enter （导包，生成变量等）<br>10.单行注释或多行注释 ：  Ctrl + / 或 Ctrl + Shift + /<br>11.重命名 shift+f6<br>12.for循环  直接 ：fori   回车即可<br>13.代码块包围：try-catch,if,while等  ctrl+alt+t<br>14.显示代码结构  : alt + 7<br>15.显示导航栏： alt +1<br>16.撤回：ctrl+z<br>17.缩进：tab  取消缩进： shift+tab</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; title=&quot;IDE&quot;&gt;&lt;/a&gt;IDE&lt;/h1&gt;&lt;p&gt;集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="IDEA" scheme="http://example.com/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Java中的数组</title>
    <link href="http://example.com/2021/12/23/Java-%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/12/23/Java-%E6%95%B0%E7%BB%84/</id>
    <published>2021-12-23T10:17:45.000Z</published>
    <updated>2021-12-23T10:44:06.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组用来存储数据的，在程序设计中，为了处理方便，数组用来将相同类型的若干数据组织起来。这个若干数据的集合我们称之为数组。</p><h1 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h1><p>数组是相同类型数据的有序集合。数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。其中，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。<br>数组的四个基本特点：<br>1.长度是确定的。数组一旦被创建，它的大小就是不可以改变的。<br>2.其元素的类型必须是相同类型，不允许出现混合类型。<br>3.数组类型可以是任何数据类型，包括基本类型和引用类型。<br>4.数组有索引的：索引从0开始，到 数组.length-1 结束<br>5.数组变量属于引用类型，数组也是对象。<br>PS:数组变量属于引用类型，数组也是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中存储的。</p><h1 id="数组的定义方式"><a href="#数组的定义方式" class="headerlink" title="数组的定义方式"></a>数组的定义方式</h1><p>数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。</p><h2 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h2><p>除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。<br>eg:<br>int[] arr = {12,23,45};<br>int[] arr = new int[]{12,23,45};</p><h2 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h2><p>数组定义与为数组元素分配空间并赋值的操作分开进行。<br>eg:<br>int[] arr ;<br>arr = new int[3]<br>arr[0] = 12;<br>arr[1] = 23;<br>arr[2] = 45;</p><h2 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h2><p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。数组是有初始默认值的。<br>int[] arr = new int[3];</p><h1 id="数组的应用"><a href="#数组的应用" class="headerlink" title="数组的应用"></a>数组的应用</h1><h2 id="main方法：程序的入口，在同一个类中，如果有多个方法，那么虚拟机就会识别main方法，从这个方法作为程序的入口"><a href="#main方法：程序的入口，在同一个类中，如果有多个方法，那么虚拟机就会识别main方法，从这个方法作为程序的入口" class="headerlink" title="main方法：程序的入口，在同一个类中，如果有多个方法，那么虚拟机就会识别main方法，从这个方法作为程序的入口"></a>main方法：程序的入口，在同一个类中，如果有多个方法，那么虚拟机就会识别main方法，从这个方法作为程序的入口</h2><p>main方法格式严格要求：<br>public static void main(String[] args){}<br>public static 修饰符 ，暂时用这个 –&gt;面向对象一章<br>voi d代表方法没有返回值 对应的类型void<br>main 见名知意名字<br>String[] args 形参，也就是不确定因素<br>问题：程序中是否可以有其他的方法也叫main方法？<br>可以，构成了方法的重载。</p><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p>二位数组的定义<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E6%95%B0%E7%BB%84.png"                                     ><br>数组的内存分布<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98.png"                                     ></p><h1 id="二维数组的初始化方法"><a href="#二维数组的初始化方法" class="headerlink" title="二维数组的初始化方法"></a>二维数组的初始化方法</h1><p>数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。</p><h2 id="静态初始化-1"><a href="#静态初始化-1" class="headerlink" title="静态初始化"></a>静态初始化</h2><p>除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。<br>eg：<br>int [] [] arr = { {1,2},{4,5,6} };<br>int [] [] arr = new int [] [] { {1,2},{4,5,6} };</p><h2 id="动态初始化-1"><a href="#动态初始化-1" class="headerlink" title="动态初始化"></a>动态初始化</h2><p>数组定义与为数组元素分配空间并赋值的操作分开进行。<br>int [] [] arr = new int [1] [2]; </p><h2 id="默认初始化-1"><a href="#默认初始化-1" class="headerlink" title="默认初始化"></a>默认初始化</h2><p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;p&gt;数组用来存储数据的，在程序设计中，为了处理方便，数组用来将相同类型的若干数据组织起来。这个若干数据的集合我们称之为数组。&lt;/p&gt;
&lt;h1 i</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Java中的方法</title>
    <link href="http://example.com/2021/12/23/Java-%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/12/23/Java-%E6%96%B9%E6%B3%95/</id>
    <published>2021-12-23T09:39:25.000Z</published>
    <updated>2021-12-23T10:37:59.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法的定义、调用、重载"><a href="#方法的定义、调用、重载" class="headerlink" title="方法的定义、调用、重载"></a>方法的定义、调用、重载</h1><h2 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h2><h3 id="什么是方法？"><a href="#什么是方法？" class="headerlink" title="什么是方法？"></a>什么是方法？</h3><p>方法(method)就是一段用来完成特定功能的代码片段，类似于其它语言的函数(function)。<br>方法用于定义该类或该类的实例的行为特征和功能实现。 方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。</p><h3 id="方法声明格式"><a href="#方法声明格式" class="headerlink" title="方法声明格式"></a>方法声明格式</h3><p>[修饰符1  修饰符2  …]  返回值类型    方法名(形式参数列表){<br>        Java语句；<br>}</p><h3 id="方法的调用方式"><a href="#方法的调用方式" class="headerlink" title="方法的调用方式"></a>方法的调用方式</h3><p>对象名.方法名(实参列表)</p><h3 id="方法的详细说明"><a href="#方法的详细说明" class="headerlink" title="方法的详细说明"></a>方法的详细说明</h3><p>形式参数：在方法声明时用于接收外界传入的数据。<br>实参：调用方法时实际传给方法的数据。<br>返回值：方法在执行完毕后返还给调用它的环境的数据。<br>返回值类型：事先约定的返回值的数据类型，如无返回值，必须显示指定为为void。<br>代码：</p><p>public class TestMethod01{</p><pre><code>    //方法的定义：（写方法）    public static int add(int num1,int num2)&#123;            int sum = 0;            sum += num1;            sum += num2;            return sum;//将返回值返回到方法的调用处    &#125;    public static void main(String[] args)&#123;            //10+20:            //方法的调用：（用方法）            int num = add(10,20);            System.out.println(num);            /*            int num1 = 10;            int num2 = 20;            int sum = 0;            sum += num1;            sum += num2;            System.out.println(sum);            */            //30+90:            int sum = add(30,90);            System.out.println(sum);            /*            int num3 = 30;            int num4 = 90;                int sum1 = 0 ;            sum1 += num3;            sum1 += num4;            System.out.println(sum1);            */            //50+48:            System.out.println(add(50,48));        &#125;        </code></pre><p>}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.方法是：对特定的功能进行提取，形成一个代码片段，这个代码片段就是我们所说的方法<br>2.方法和方法是并列的关系，所以我们定义的方法不能写到main方法中<br>3.方法的定义–》格式：<br>        修饰符 方法返回值类型 方法名(形参列表){<br>                方法体;<br>                return 方法返回值;<br>        }</p><p>4.方法的作用：提高代码的复用性<br>5.总结方法定义的格式：</p><ol><li>修饰符: 暂时使用public static —&gt;面向对象一章讲解</li><li>方法返回值类型  : 方法的返回值对应的数据类型<br>数据类型： 可以是基本数据类型（byte,short,int,long,float,double,char,boolean） 也可以是引用数据类型 </li><li>方法名 :见名知意，首字母小写，其余遵循驼峰命名，  eg: addNum ,一般尽量使用英文来命名  </li><li>形参列表 :方法定义的时候需要的形式参数 ：  int  num1, int num2 –&gt;相当于告诉方法的调用者：需要传入几个参数，需要传入的参数的类型<br> 实际参数：方法调用的时候传入的具体的参数：  10,20  –&gt;根据形式参数的需要传入的</li></ol><p>5)方法体：具体的业务逻辑代码<br>6) return 方法返回值;<br>方法如果有返回值的话： return+方法返回值，将返回值返回到方法的调用处<br>方法没有返回值的话：return可以省略不写了，并且方法的返回值类型为：void</p><p>public class TestMethod02{</p><pre><code>    public static void add(int num1,int num2)&#123;            int sum = 0;            sum += num1;            sum += num2;                System.out.println(sum);            //return;     &#125;    public static void main(String[] args)&#123;            //10+20:            //方法的调用：（用方法）            add(10,20);             //30+90:            add(30,90);            //50+48:            //System.out.println(add(50,48));//报错：TestMethod02.java:22: 错误: 此处不允许使用 &#39;空&#39; 类型    &#125;</code></pre><p>}</p><p>什么时候有返回值，什么时候没有返回值？ 看心情–》看需求</p><p>6.方法的定义需要注意什么？<br>1）形参列表要怎么写：定义几个参数，分别是什么类型的  —》不确定因素我们会当做方法的形参<br>2)  方法到底是否需要返回值 ，如果需要的话，返回值的类型是什么</p><p>7.方法的调用需要注意什么？<br>1）实际参数要怎么传入：传入几个参数，传入什么类型的<br>2） 方法是否有返回值需要接受</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>问下列代码中两个数是否交换成功<br>public class TestM{<br>        public static void main(String[] args){<br>                int a=10;<br>                int b=20;<br>                System.out.println(“输出交换前的两个数：”+a+”—“+b);<br>                changeNum(a,b);<br>                System.out.println(“输出交换后的两个数：”+a+”—“+b);<br>        }<br>        public static void changeNum(int num1,int num2){<br>                int t;<br>                t=num1;<br>                num1=num2;<br>                num2=t;<br>        }<br>}<br>答：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E6%96%B9%E6%B3%951.png"                                     ></p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><h3 id="什么是方法的重载："><a href="#什么是方法的重载：" class="headerlink" title="什么是方法的重载："></a>什么是方法的重载：</h3><p>方法的重载是指一个类中可以定义多个方法名相同，但参数不同的方法。 调用时，会根据不同的参数自动匹配对应的方法。</p><p>注意本质：重载的方法，实际是完全不同的方法，只是名称相同而已！</p><h3 id="构成方法重载的条件："><a href="#构成方法重载的条件：" class="headerlink" title="构成方法重载的条件："></a>构成方法重载的条件：</h3><p>不同的含义：形参类型、形参个数、形参顺序不同<br>只有返回值不同不构成方法的重载<br>如：int a(String str){}与 void a(String str){}不构成方法重载<br>只有形参的名称不同，不构成方法的重载<br>如：int a(String str){}与int a(String s){}不构成方法重载</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>public class TestMethod05{<br>    public static void main(String[] args){<br>                //10+20:<br>                int sum = add(10,20);<br>                System.out.println(sum);</p><pre><code>            //20+40+80:            //System.out.println(add(add(20,40),80));            System.out.println(add(20,40,80));            //30+60+90+120:            //System.out.println(add(add(30,60),add(90,120)));            System.out.println(add(30,60,90,120));            //9.8+4.7:            //System.out.println(add(9.8,4.7));            System.out.println(add(9.8,4.7));    &#125;        //定义一个方法：两个数相加：两个int类型数据相加    public static int add(int num1,int num2)&#123;            return num1+num2;    &#125;        //定义一个方法：三个数相加：    public static int add(int num1,int num2,int num3)&#123;            return num1+num2+num3;    &#125;        //定义一个方法：四个数相加：    public static int add(int num1,int num2,int num3,int num4)&#123;            return num1+num2+num3+num4;    &#125;    //定义一个方法：两个数相加：两个double类型的数据相加    public static double add(double num1,double num2)&#123;            return num1+num2;    &#125;        </code></pre><p>}</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>1.方法的重载：在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。<br>2.方法的重载只跟：方法名和形参列表有关，与修饰符，返回值类型无关。<br>3.注意：形参列表不同指的是什么？<br>（1）个数不同<br>add()   add(int num1)   add(int num1,int num2)<br>（2）顺序不同<br>add(int num1,double num2)   add(double num1,int num2)<br>（3）类型不同<br>add(int num1)   add(double num1)</p><p>4.请问下面的方法是否构成了方法的重载？<br>(1)add(int a)  和  add(int b)   —&gt;不构成,相当于方法的重复定义<br>(2)public static int add(int a) 和  public static void add(int b)  —&gt;不构成</p><h2 id="扩充："><a href="#扩充：" class="headerlink" title="扩充："></a>扩充：</h2><p>public class TestMethod06{<br>    public static void main(String[] args){<br>                add(5);<br>                //级别：byte,short,char–&gt;int–&gt;long–&gt;float—&gt;double<br>        }</p><pre><code>    public static void add(double num1)&#123;            System.out.println(&quot;------2&quot;);    &#125;    public static void add(float num1)&#123;            System.out.println(&quot;------3&quot;);    &#125;    public static void add(long num1)&#123;            System.out.println(&quot;------4&quot;);    &#125;    /*    public static void add(int num1)&#123;            System.out.println(&quot;------1&quot;);    &#125;    */</code></pre><p>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;方法的定义、调用、重载&quot;&gt;&lt;a href=&quot;#方法的定义、调用、重载&quot; class=&quot;headerlink&quot; title=&quot;方法的定义、调用、重载&quot;&gt;&lt;/a&gt;方法的定义、调用、重载&lt;/h1&gt;&lt;h2 id=&quot;方法的定义和调用&quot;&gt;&lt;a href=&quot;#方法的定义和调用&quot;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="方法" scheme="http://example.com/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java中的流程控制</title>
    <link href="http://example.com/2021/12/22/Java-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2021/12/22/Java-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-12-22T14:13:36.000Z</published>
    <updated>2021-12-22T14:40:04.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>【1】流程控制的作用：<br>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。<br>【2】控制语句的分类：<br>控制语句分为三类：顺序、选择和循环。<br>“顺序结构”代表“先执行a，再执行b”的逻辑。<br>“条件判断结构”代表“如果…，则…”的逻辑。<br>“循环结构”代表“如果…，则再继续…”的逻辑。<br>  三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。所以任何一种高级语言都具备上述两种结构。<br>本章是大家真正进入编程界的“门票”。<br>【3】流程控制的流程：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E6%B5%81%E7%A8%8B%E5%9B%BE.png"                                     ></p><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if(表达式){</p><p>}else if(表达式){</p><p>}else{</p><p>}</p><p>if语句会根据小括号里的表达式来判断如果满足条件，则进入对应的大括号，执行大括号里的代码，如果不满足则判断下一个else if，都不满足则执行else的大括号。<br>例如：<br>if(score&gt;=90){<br>        System.out.println(“A级”);<br>}else if(score&gt;=80){<br>        System.out.println(“B级”);<br>}</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch多分支结构(多值情况)<br>语法结构：<br>switch (表达式) {<br>    case 值1:<br>         语句序列1;<br>    case 值2:<br>         语句序列2;<br>        .<br>        .<br>        .<br>}<br>switch语句会根据表达式的值从相匹配的case标签处开始执行，一直执行到break语句处或者是switch语句的末尾。如果表达式的值与任一case值不匹配，则进入default语句（如果存在default语句的情况）。根据表达式值的不同可以执行许多不同的操作。switch语句中case标签在JDK1.5之前必须是整数（long类型除外）或者枚举，不能是字符串，在JDK1.7之后允许使用字符串(String)。大家要注意，当布尔表达式是等值判断的情况，可以使用if-else if-else多分支结构或者switch结构，如果布尔表达式区间判断的情况，则只能使用if-else if-else多分支结构。<br>switch多分支结构的流程图如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/switch.png"                                     ><br>例如：<br>switch(score/10){<br> case 3 : System.out.println(“A级”);break;<br> case 2 : System.out.println(“B级”);break;<br> case 1 : System.out.println(“C级”);break;<br> default:System.out.println(“成绩错误”);break;<br> case 0 : System.out.println(“D级”);break;<br>}<br>switch分支和if分支区别：<br>表达式是等值判断的话–》if ，switch都可以<br>如果表达式是区间判断的情况—》if最好<br>switch应用场合：就是等值判断，等值的情况比较少的情况下      </p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>语法结构：<br>while (布尔表达式) {<br>            循环体;<br>}<br>在循环刚开始时，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于后来每一次额外的循环，都会在开始前重新计算一次。<br>语句中应有使循环趋向于结束的语句，否则会出现无限循环–––”死”循环。<br>while循环结构流程图如图所示:<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/while.png"                                     ><br>例如：<br>int sum = 0;<br> while(num&lt;=5){[2]条件判断<br>  sum += num;[3]循环体<br>  num++;[4]迭代<br>}      </p><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><p>语法结构：<br>do {<br>            循环体;<br>    } while(布尔表达式) ;<br> do-while循环结构会先执行循环体，然后再判断布尔表达式的值，若条件为真，执行循环体，当条件为假时结束循环。do-while循环的循环体至少执行一次。<br> do-while循环结构流程图如图所示：<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/do_while.png"                                     ><br> 例如：<br> int i = 101;<br>int sum = 0;<br>do{<br>    sum += i;<br>    i++;<br>}while(i&lt;=100);//一定要注意写这个分号，否则编译出错<br>System.out.println(i);//102<br>System.out.println(sum);//101<br>while和do-while的区别:<br>while:先判断，再执行<br>do-while:先执行，再判断—》至少被执行一次，从第二次开始才进行判断</p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>语法结构：<br>for (初始表达式; 布尔表达式; 迭代因子) {<br>          循环体;<br>}<br> for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。for循环在第一次反复之前要进行初始化，即执行初始表达式；随后，对布尔表达式进行判定，若判定结果为true，则执行循环体，否则，终止循环；最后在每一次反复的时候，进行某种形式的“步进”，即执行迭代因子。<br>初始化部分设置循环变量的初值<br>条件判断部分为任意布尔表达式<br>迭代因子控制循环变量的增减<br>for循环在执行条件判定后，先执行的循环体部分，再执行步进。<br>for循环结构的流程图如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/for.png"                                     ><br>例如：<br>int sum = 0;<br>int i;<br>for(i = 1;i&lt;=100;i++){<br>sum += i;<br>}<br>System.out.println(sum);<br>System.out.println(i);</p><h2 id="break和continue关键字"><a href="#break和continue关键字" class="headerlink" title="break和continue关键字"></a>break和continue关键字</h2><p>在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。<br>continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。<br>return的作用,结束当前所在方法的执行。</p><h2 id="循环的嵌套"><a href="#循环的嵌套" class="headerlink" title="循环的嵌套"></a>循环的嵌套</h2><p>循环和条件判断分支都是可以进行多层嵌套使用的，很灵活。</p><h3 id="双重嵌套"><a href="#双重嵌套" class="headerlink" title="双重嵌套"></a>双重嵌套</h3><p>比如我要做一个乘法表，就可以用双重嵌套来实现。<br>例如：<br>public class TestFor11{<br>    public static void main(String[] args){<br>                //1<em>6=6   2</em>6=12  3<em>6=18  4</em>6=24  5<em>6=30  6</em>6=36<br>                /*<br>                System.out.print(“1<em>6=6”+”\t”);<br>                System.out.print(“2</em>6=12”+”\t”);<br>                System.out.print(“3<em>6=18”+”\t”);<br>                System.out.print(“4</em>6=24”+”\t”);<br>                System.out.print(“5<em>6=30”+”\t”);<br>                System.out.print(“6</em>6=36”+”\t”);</p><pre><code>            for(int i=1;i&lt;=6;i++)&#123;                    System.out.print(i+&quot;*6=&quot;+i*6+&quot;\t&quot;);            &#125;            //换行            System.out.println();                        //1*7=7   2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49            for(int i=1;i&lt;=7;i++)&#123;                    System.out.print(i+&quot;*7=&quot;+i*7+&quot;\t&quot;);            &#125;            //换行            System.out.println();                        //1*8=8   2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64            for(int i=1;i&lt;=8;i++)&#123;                    System.out.print(i+&quot;*8=&quot;+i*8+&quot;\t&quot;);            &#125;            //换行            System.out.println();            */                        for(int j=1;j&lt;=9;j++)&#123;                    for(int i=1;i&lt;=j;i++)&#123;                            System.out.print(i+&quot;*&quot;+j+&quot;=&quot;+i*j+&quot;\t&quot;);                    &#125;                    //换行                    System.out.println();            &#125;    &#125;</code></pre><p>}<br>运行结果：<br>1<em>1=1<br>1</em>2=2   2<em>2=4<br>1</em>3=3   2<em>3=6   3</em>3=9<br>1<em>4=4   2</em>4=8   3<em>4=12  4</em>4=16<br>1<em>5=5   2</em>5=10  3<em>5=15  4</em>5=20  5<em>5=25<br>1</em>6=6   2<em>6=12  3</em>6=18  4<em>6=24  5</em>6=30  6<em>6=36<br>1</em>7=7   2<em>7=14  3</em>7=21  4<em>7=28  5</em>7=35  6<em>7=42  7</em>7=49<br>1<em>8=8   2</em>8=16  3<em>8=24  4</em>8=32  5<em>8=40  6</em>8=48  7<em>8=56  8</em>8=64<br>1<em>9=9   2</em>9=18  3<em>9=27  4</em>9=36  5<em>9=45  6</em>9=54  7<em>9=63  8</em>9=72  9*9=81</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;p&gt;【1】流程控制的作用：&lt;br&gt;流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_流程控制" scheme="http://example.com/tags/Java-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java_运算符</title>
    <link href="http://example.com/2021/12/22/Java-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/2021/12/22/Java-%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-12-22T13:40:47.000Z</published>
    <updated>2021-12-22T14:58:12.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>算数运算符就是平时用到的数学中的“+，-，*，/”，然后比较特殊的是取模：“%”，和自增自减：“++（自增），–（自减）”。</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>例如：<br>Java中赋值运算符是“=”，意思是把等号右边的数值赋给左边的内容。</p><p>public class Test1{<br>        public static void main(String[] args){<br>                //任意给出两个数，交换两个数并输出：<br>                //1.给出两个数：<br>                int num1 = 10;<br>                int num2 = 20;</p><pre><code>            //2.输出交换前的两个数：            System.out.println(&quot;交换前：&quot;+num1+&quot;\t&quot;+num2);                        //3.交换            /*            错误代码：            num1 = num2;            num2 = num1;                */                    //解决办法：            //引入一个中间变量:            int t;            t = num1;            num1 = num2;            num2 = t;            /*            int t;            t = num2;            num2 = num1;            num1 = t;                        */                        //4.输出交换后的两个数：            System.out.println(&quot;交换后：&quot;+num1+&quot;\t&quot;+num2);    &#125;</code></pre><p>}</p><h2 id="扩展赋值运算符"><a href="#扩展赋值运算符" class="headerlink" title="扩展赋值运算符"></a>扩展赋值运算符</h2><p>把赋值运算符和算数运算符拼接起来的称为扩展赋值运算符。其中包括“+=，-=，*=，/=”<br>举个例子：a+=10；这个式子结果与a=a+10一样，就是把a的数值加上10再赋值给a。如果原来定义的a值为5，则式子运算完结果就是15。<br>但是a+=10和a=a+b是有区别的，a+=b的可读性稍差，但是编译效率高，是底层自动进行类型转换，a=a+b的可读性好但是编译效率低，需要手动进行类型转换。<br>例如：<br>public class Test2{<br>        public static void main(String[] args){<br>                //实现功能：给出三个数，求和：<br>                //1.给出三个数：<br>                int num1 = 10;<br>                int num2 = 20;<br>                int num3 = 30;<br>                //2.求和<br>                //int sum = num1+num2+num3;<br>                //定义一个变量，用来接收和：<br>                int sum = 0;<br>                sum = sum + num1;//等效：  sum += num1;<br>                sum = sum + num2;// sum += num2;<br>                sum = sum + num3;//sum += num3;<br>                //3.将和输出：<br>                System.out.println(“和：”+sum);<br>        }<br>}</p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系元素符是比较符号两遍大小的，有：&gt;，&lt;，&gt;=，&lt;=，==，!=。这里注意一下==，这个才是等于，两遍数值相等的时候，式子才成立，！=是不等于，两遍式子不想等的时候成立。<br>例如：<br>public class Test3{<br>        public static void main(String[] args){<br>                //&gt;，&lt;，&gt;=，&lt;=，==，!=<br>                //关系运算符最终结果：要么是true要么是false<br>                System.out.println(4&gt;9);//false<br>                System.out.println(4&lt;9);//true<br>                System.out.println(4&gt;=9);//false<br>                System.out.println(4&lt;=9);//true<br>                System.out.println(4==9);//false<br>                System.out.println(4!=9);//true<br>                System.out.println((5&lt;9)!=(6==8));//true<br>        }<br>}</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符是进行逻辑运算的，在计算机组成与原理有讲过他们的运算，有：逻辑与：“&amp;”，逻辑或：“|“，短路与：”&amp;&amp;“，短路或：”||“，逻辑非：”!“，逻辑异或：”^“。<br>这些运算的结果只有true或者false，也就是真或者假。短路的于或比正常的与或的执行效率更高一些。<br>例如：<br>public class Test4{<br>        public static void main(String[] args){<br>                int i=8;<br>                System.out.println((5&gt;7)&amp;&amp;(i++==2)); //false<br>                System.out.println(i);  //8 </p><pre><code>            int a=8;            System.out.println((5&gt;7)&amp;(a++==2)); //false            System.out.println(a); //9                                    int m=8;            System.out.println((5&lt;7)&amp;&amp;(m++==2)); //false            System.out.println(m); //9                        int b=2;            System.out.println((5&lt;7)&amp;(b++==2)); //true            System.out.println(b);  //3                        int c=2;            System.out.println((5&lt;7)&amp;(++c==2)); //false            System.out.println(c);  //3    &#125;</code></pre><p>}</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符是处理数据移位的运算符，有：&amp;，|，^，取反：“~” ， 右移：“&gt;&gt;”，左移：“&lt;&lt;”，无符号右移：“&gt;&gt;&gt;”。<br>前面三个与逻辑运算符长得一样，要区分他们具体是哪一个，看符号两边的数据类型，如果左右连接的是布尔类型的操作数，就是逻辑运算符，如果左右连接的是具体的数值，就是位运算符。<br>位运算不是很常用，了解即可。</p><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>条件运算符是if语句的简化版，也称三元运算符或者三目运算符，写法是：“ a？b ：c ”.<br>其中a是一个布尔类型的表达式，返回结果要么是true要么false，通过a的结果决定最终表达式的结果:<br>如果a的结果是true，那么表达式最终结果为b<br>如果a的结果是false，那么表达式最终结果为c<br>例如：<br>public class Test5{<br>        public static void main(String[] args){<br>                int num = (5&gt;7)?6:9 ;<br>                System.out.println(num);</p><pre><code>            String str = (4==4)?&quot;你好&quot;:&quot;你不好&quot; ;            System.out.println(str);                        System.out.println((4==4)?&quot;你好&quot;:&quot;你不好&quot;);    &#125;</code></pre><p>}</p><h1 id="运算符的优先级别"><a href="#运算符的优先级别" class="headerlink" title="运算符的优先级别"></a>运算符的优先级别</h1><p>我们不需要去刻意的记优先级关系，因为开发中不会特意去写特别复杂的表达式。<br>优先级是：赋值&lt;三目&lt;逻辑&lt;关系&lt;算术&lt;单目。<br>其实就相当于数学中乘除法优先计算于加减法，但是有括号先算括号里的。这个也是这个意思<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E8%BF%90%E7%AE%97%E7%AC%A6.png"                      alt="总图"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h1&gt;&lt;h2 id=&quot;算数运算符&quot;&gt;&lt;a href=&quot;#算数运算符&quot; class=&quot;headerlink&quot; title=&quot;算数运算符&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_运算符" scheme="http://example.com/tags/Java-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据类型</title>
    <link href="http://example.com/2021/12/22/Java-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/12/22/Java-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-12-22T13:19:47.000Z</published>
    <updated>2021-12-22T14:54:08.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>【1】标识符：读音   biao zhi fu<br>【2】什么是标识符？<br>  包，类，变量，方法…..等等,只要是起名字的地方,那个名字就是标识符<br>【3】标识符定义规则：<br>1.四个可以（组成部分）：数字，字母，下划线_，美元符号$<br>注意：字母概念比较宽泛，指的是英文字母，汉字，日语，俄语……<br>但是我们一般起名字尽量使用英文字母<br>2.两个不可以：不可以以数字开头，不可以使用java中的关键字<br>3.见名知意：增加可读性<br>4.大小写敏感：  int a ;  int A;<br>5.遵照驼峰命名：<br> 类名：首字母大写，其余遵循驼峰命名<br> 方法名，变量名：首字母小写，其余遵循驼峰命名<br> 包名：全部小写，不遵循驼峰命名<br>6.长度无限制，但是不建议太长  asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>关键字：被JAVA语言赋予了特殊含义，用作专门用途的单词<br>比如：clss、char、if、for<br>特点：JAVA中所有关键字都为小写<br>官网中关键字的说明：<a class="link"   href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" >https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html<i class="fas fa-external-link-alt"></i></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E5%85%B3%E9%94%AE%E5%AD%97.png"                                     ></p><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p>顾名思义，变量就是可以变化的量，而常量就是一个固定的数值。<br>比如：int a；这里面的a没有赋值，所以在之后的操作中可以是10，20等很多值，即为变量。<br>     int a=10；这里面a给了一个10为初始值，虽然后续也可以修改但是没改之前这个值都是不变的，即为常量。<br>变量和常量的用途是不一样的，比如要是想定义一个年龄这种随着时间岁数回增长的，就可以定义为变量。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java是一种强类型语言，每个变量都必须声明其数据类型。<br>Java的数据类型可分为两大类：基本数据类型（primitive data type）和引用数据类型（reference data type）。<br>基本数据类型分为数值型、字符型、布尔型，其中数值型还分为整数类型和浮点类型。<br>定义这些数据类型的代码分别是：<br>整数：byte、short、int、long<br>浮点数：float、double<br>字符型：char<br>布尔型：boolean<br>引用数据类型分为类、接口、数组。<br>定义这些数据类型的代码分别是：<br>类：class<br>接口：interface<br>数组有很多种定义方法，在后面讲数组的文章会写到。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"                                     ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;h2 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;标识</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_数据类型" scheme="http://example.com/tags/Java-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java核心机制及部署</title>
    <link href="http://example.com/2021/12/22/Java-%E6%A0%B8%E5%BF%83/"/>
    <id>http://example.com/2021/12/22/Java-%E6%A0%B8%E5%BF%83/</id>
    <published>2021-12-22T09:49:41.000Z</published>
    <updated>2021-12-22T14:52:56.086Z</updated>
    
    <content type="html"><![CDATA[<p>前言：此篇文章讲述的是如何在电脑搭建Java运行环境。</p><h1 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h1><h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><h3 id="DOS操作系统"><a href="#DOS操作系统" class="headerlink" title="DOS操作系统"></a>DOS操作系统</h3><p>–Microsoft公司推出的操作系统。（在windows之前的操作系统）<br>–DOS是英文”Disk Operating System”的缩写,其中文含意是”磁盘操作系统”.<br>–DOS是单用户、单任务的操作系统.（只能执行一个任务）<br>就是大家经常用到的黑框框<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/DOS1.png"                                     ></p><h3 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h3><p>–在windows中，我们通过鼠标菜单等来操作系统，而在dos操作系统中，要通过dos命令来操作系统。<br>–是DOS操作系统的命令，是一种面向磁盘的操作命令，<br>–不区分大小写。</p><h3 id="命令学习："><a href="#命令学习：" class="headerlink" title="命令学习："></a>命令学习：</h3><p>windows给我们保留了类似dos系统的操作界面，可以直接操作磁盘！<br>dos 也是一种操作系统，是在windows出现以前用的，后来windows出来后基本没人用了，但是当windows崩溃的时候，还是要的dos方式解决，它是一种纯命令方式，cmd其实就是在windows状态下进入dos方式。<br>控制命令台：win+r—&gt;cmd<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/cmd.png"                                     ><br>具体dos命令：<br>（1）切换盘符： c:  d:  e:   大小写没有区分<br>（2）显示详细信息：dir<br>（3）改变当前目录：cd +路径<br>（4）<br> . 当前目录<br> ..  代表上一层目录<br> 如：cd ..就是切换为上一级目录<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/cd.png"                                     ><br>（5）清屏：cls<br>（6）切换历史命令：上下箭头<br>（7）补全命令： tab按键<br>（8）创建目录：md ,删除目录：rd +文件名<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/md.png"                                     ><br>（9）复制文件命令：copy +文件名<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/copy.png"                                     ><br>（10）删除文件：del +文件名<br>del后面如果接的是文件夹/目录：那么删除的就是这个文件夹下的文件，而不是文件夹<br>以上都是一些常用的DOS命令，在Linux系统和Mac中经常用到类似的命令，熟能生巧<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/del.png"                                     ></p><h2 id="Java环境准备–-gt-装JDK"><a href="#Java环境准备–-gt-装JDK" class="headerlink" title="Java环境准备–&gt;装JDK"></a>Java环境准备–&gt;装JDK</h2><p>【1】下载JDK<br>Orcel官网中下载对应自己计算机操作系统的安装包：<a class="link"   href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" >www.oracle.com/technetwork/java/javase/downloads/index.html<i class="fas fa-external-link-alt"></i></a><br>【2】安装JDK<br>选好安装路径，以后用Idea或者Eclipse配置时候需要用到JDK的路径，其他下一步即可。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84.png"                                     ><br>【3】卸载JDK<br>控制面板卸载即可<br>【4】 验证JDK是否安装成功<br>在桌面上按windows+r然后输入cmd打开命令行然后输入：java -version<br>若出现JDK版本就是安装成功了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/java_version.png"                                     ><br>【5】JDK和JRE：<br>安装时候会安装JDK和JRE<br>区别如下：<br>JDK： Java Development kit   —-&gt;编写Java程序的程序员使用的软件<br>JRE : Java Runtime Enviroment  —-》运行Java程序的用户使用的软件<br>简单说就是只安装JRE就可以运行Java的程序但是不能进行编写。<br>【6】配置环境变量path<br>1.打开我的电脑属性选项<br>2.左边菜单打开高级系统选项，然后打开环境变量<br>3.新建环境变量叫：classpath 变量值为：.<br>如：变量名：classpath<br>   变量值：.<br>classpath作用：只要你配置到classpath中的路径，在执行java的字节码文件的时候，就会去这个配置的路径下找对应的字节码文件，而写了.\就可以全局运行Java了<br>4.新建环境变量：JAVA_HOME:和上一步一样新建然后变量名输入JAVA_HOME，变量值为JDK的安装目录<br>如：变量名：JAVA_HOME<br>   变量值：C:\Program Files\Java\jdk1.8.0_151<br>这个环境变量是为了之后运行tomcat用的<br>5.在path环境变量中加入自己安装JDK的路径加\bin<br>如：C:\Program Files\Java\jdk1.8.0_151\bin<br>也可以新建一个path环境变量然后输入路径+\bin<br>至此我们电脑的Java的运行环境算是配好了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path1.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path2.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path3.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path4.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path5.png"                                     ></p><h1 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h1><p>JDK帮助文档<br>SUN公司为JDK工具包提供了一整套文档资料,我们习惯上称之为JDK文档。<br>JDK文档中提供了Java中的各种技术的详细资料,以及JDK中提供的各种类的帮助说明。<br>JDk文档是Java语言的完整说明,大多数书籍中的类的介绍都要参照它来完成,它是编程者经常查阅的资料<br>如何理解API：就当做是一个“字典”，“使用手册”，API就相当于是一个电子的帮助文档，可以帮我们查看JDK提供的类的信息，平时查看的时候可结合百度一起看。<br>其实API没有什么神奇的，就是一个电子文档而已，帮助我们查看JAVA中涉及到的一些技能点。</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>现在我们开始写我们的第一段代码了，实现一个输出HelloWorld的功能<br>在任意位置建一个文件夹，起名为Java，然后在文件夹下新建一个txt文档，起名为HelloWorld.java。<br>打开文档输入：<br>public class HelloWorld{<br>        public static void main(String[] args){<br>                System.out.println(“hi 这是一段Java程序。。。”);<br>        }<br>}<br>然后保存。<br>打开我们的命令行，输入cd：java文件夹路径，进到我们这个文件夹里面。<br>输入javac HelloWorld.java对我们写的java文件进行编译。编译完之后在文件夹下面会出现一个.class文件就编译好的文件。<br>输入java HelloWorld运行程序<br>在命令行中出现HelloWorld就成功了。<br>注意：在写代码的时候要注意区分中英文的符号，所有符号必须是英文格式的，不然会出现编译错误。<br>     我们的文件名和类名必须是一样的，不然也会出现编译错误。<br>    编写代码时要注意格式排版，养成习惯，以后方便查看代码和BUG。<br>    <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/javac.png"                                     ><br>    <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/java.png"                                     ></p><h1 id="小练习：输出一个人的个人信息"><a href="#小练习：输出一个人的个人信息" class="headerlink" title="小练习：输出一个人的个人信息"></a>小练习：输出一个人的个人信息</h1><p>要求：在命令行中输出姓名，年龄，职业，身高，体重。<br>代码如下：<br>public class HiWorld{<br>        public static void main(String[] args){<br>                //进行自我介绍：<br>                System.out.println(“姓名:”);<br>                System.out.println(“丽丽”);<br>                System.out.println(“职业:”);<br>                System.out.println(“学生”);<br>                System.out.println(“身高:”);<br>                System.out.println(“180”);<br>                System.out.println(“体重:”);<br>                System.out.println(“130”);</p><pre><code>    &#125;</code></pre><p>}</p><h1 id="扩展：JDK、JRE、JVM的区别"><a href="#扩展：JDK、JRE、JVM的区别" class="headerlink" title="扩展：JDK、JRE、JVM的区别"></a>扩展：JDK、JRE、JVM的区别</h1><p>JDK和JRE的区别<br>初学JAVA很容易被其中的很多概念弄的傻傻分不清楚，首先从概念上理解一下吧，JDK（Java Development Kit）简单理解就是Java开发工具包，JRE(Java Runtime Enviroment)是Java的运行环境，JVM( java virtual machine)也就是常常听到Java虚拟机。JDK是面向开发者的，JRE是面向使用JAVA程序的用户。</p><p>JRE和JVM的区别<br>JVM – java virtual machineJVM就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，class文件并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行，类似于C#中的CLR。<br>JVM不能单独搞定class的执行，解释class的时候JVM需要调用解释所需要的类库lib。在JDK下面的的jre目录里面有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。<br>JVM+Lib=JRE，如果讲的具体点就是bin目录下的jvm.dll文件， jvm.dll无法单独工作，当jvm.dll启动后，会使用explicit的方法(就是使用Win32 API之中的LoadLibrary()与GetProcAddress()来载入辅助用的动态链接库)，而这些辅助用的动态链接库(.dll)都必须位 于jvm.dll所在目录的父目录之中。因此想使用哪个JVM，只需要设置PATH，指向JRE所在目录下的jvm.dll。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：此篇文章讲述的是如何在电脑搭建Java运行环境。&lt;/p&gt;
&lt;h1 id=&quot;核心机制&quot;&gt;&lt;a href=&quot;#核心机制&quot; class=&quot;headerlink&quot; title=&quot;核心机制&quot;&gt;&lt;/a&gt;核心机制&lt;/h1&gt;&lt;h2 id=&quot;常用DOS命令&quot;&gt;&lt;a href=&quot;#常用D</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_部署" scheme="http://example.com/tags/Java-%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Java介绍</title>
    <link href="http://example.com/2021/12/22/Java-%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    <id>http://example.com/2021/12/22/Java-%E5%8F%91%E5%B1%95%E5%8F%B2/</id>
    <published>2021-12-22T09:23:53.000Z</published>
    <updated>2021-12-22T14:43:22.004Z</updated>
    
    <content type="html"><![CDATA[<p>前言：此篇文章包括Java的发展史、Java结构和JAVA的特性优势，发展史有过了解即可，Java的结构和特性优势要搞明白，为什么Java一直处于计算机语言的主流地位，Java与其他语言的区别在哪，这对我们以后的项目也有很大的好处。</p><h1 id="Java简史"><a href="#Java简史" class="headerlink" title="Java简史"></a>Java简史</h1><h2 id="Java发明人"><a href="#Java发明人" class="headerlink" title="Java发明人"></a>Java发明人</h2><p>James  Gosling</p><h2 id="SUN公司"><a href="#SUN公司" class="headerlink" title="SUN公司"></a>SUN公司</h2><p>SUN公司<br>美国SUN(Stanford University Network)公司<br>在中国大陆的正式中文名为“太阳计算机系统（中国）有限公司”<br>在台湾中文名为“升 阳电脑公司”。</p><h3 id="Java发明的缘由"><a href="#Java发明的缘由" class="headerlink" title="Java发明的缘由"></a>Java发明的缘由</h3><p>Java为什么被发明<br>Green项目。<br>应用环境：像电视盒这样的消费类电子产品<br>要求： 语言本身是中立的，也就是跨平台<br>        1996年Java第一次发布就引起了人们的极大兴趣。关注Java的人士不仅限于计算机出版界，  还有诸如《纽约时报》《华盛顿邮报》《商业周刊》这样的主流媒体。Java 是第一种也是唯一种在National Public Radio上占用了10分钟时间来进行介绍的程序设计语言，并且还得到了$100000000的风险投资基金。这些基金全部用来支持用这种特别的计算机语言开发的产品。重温那些令人兴奋的日子是很有意思的。我们将简要地介绍一下Java语言的发展历史：<br>        Java的历史要追溯到1991年，由Patrick Naughton 及其伙伴James Gosling (一个全能的计算机奇才)带领的Sun公同的工程师小组想要设计一种小型的计算机语言，主要用于像有线电视转换盒这类的消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小且能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是不能与任何特定的体系结构捆绑在一起。这个项目被命名为”Green”。<br>        所有就要求有这样的一种代码： 代码短小、紧凑且与平台无关。但是，Sun公司的人都有UNIX的应用背景。因此，所开发的语言以C++为基础。 是Gosling率先创造了这个语言，把这种语言称为“Oak”(这么起名的原因大概是因为他非常喜欢自己办公室外的橡树)。Sun 公司的人后来发现Oak是一种已有的计算机语言的名字，于是，将其改名为Java。</p><h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2><p>经历阶段<br>1991年，James Gosling在SUN公司的工程师小组想要设计这样一种小型计算机语言。该语言主要用于像电视盒这样的消费类电子产品。另外，由于不同的厂商选择不同的CPU和操作系统，因此，要求该语言不能和特定的体系结构绑在一起，要求语言本身是中立的，也就是跨平台的。所以，将这个语言命名为“Green”，类似于绿色软件的意思。后来，改名为Oak，橡树的意思。改名后发现已经有一种语言叫这个名字了，再改名叫Java。Java语言发展到今天经历了一系列的过程：<br>–1991年，SUN公司的Green项目，Oak<br>–1995年，推出Java测试版<br>–1996年，JDK1.0<br>–1997年，JDK1.1<br>–1998年，JDK1.2，大大改进了早期版本缺陷，是一个革命性的版本，更名为Java2。<br>–2004年，J2SE 5.0 (1.5.0)  Tiger老虎 成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0<br>–2005年，Java的各种版本已经更名，以取消其中的数字”2”： J2ME更名为Java ME， J2SE更名为Java SE， J2EE更名为Java EE；<br>–2006年，J2SE 6.0 (1.6.0)  Mustang野马<br>–2009年，甲骨文(oracle)收购SUN，交易高达价格74亿<br>–2011年，JavaSE7.0   Dolphin海豚<br>–2014年，JavaSE8.0<br>–2017年，JAVA 9.0<br>–2018年3月，JAVA 10<br>–2018年9月，JAVA 11<br>–2019年3月，JAVA 12<br>–2019年9月，JAVA 13<br>–2020年3月，JAVA 14<br>现在SUN公司已经被oracle公司收购，目前每半年更新一次java的版本。但是，企业中的主流仍然以7和8为主。对于初学者，应该以企业主流应用版本为核心进行学习，没有必须在此处追求最新版本。</p><h2 id="不同版本JDK说明"><a href="#不同版本JDK说明" class="headerlink" title="不同版本JDK说明"></a>不同版本JDK说明</h2><p>JDK说明<br>JDK Version 1.1<br>   于1997-02-19发行。<br>   引入的新特性包括：<br>   引入JDBC（Java Database Connectivity）；<br>   支持内部类；<br>   引入Java Bean；<br>   引入RMI（Remote Method Invocation）；<br>   引入反射（仅用于内省）。<br>J2SE Version 1.2<br>   开发代号为Playground（操场），于1998-12-08发行。<br>   引入的新特性包括：<br>   引入集合（Collection）框架；<br>   对字符串常量做内存映射；<br>   引入JIT（Just In Time）编译器；<br>   引入对打包的Java文件进行数字签名；<br>   引入控制授权访问系统资源的策略工具；<br>   引入JFC（Java Foundation Classes），包括Swing 1.0、拖放和Java 2D类库；<br>   引入Java 插件；<br>   在JDBC中引入可滚动结果集、BLOB、CLOB、批量更新和用户自定义类型；<br>   在Applet中添加声音支持。<br>J2SE Version 1.3<br>  开发代号为Kestrel（红隼），于2000-05-08发行。<br>   引入的新特性包括：<br>   引入Java Sound API；<br>   jar文件索引；<br>   对Java的各个方面都做了大量优化和增强。<br>J2SE Version 1.4<br>   开发代号为Merlin（隼），于2004-02-06发行（首次在JCP下发行）。<br>   引入的新特性包括:<br>   XML处理；<br>   Java打印服务；<br>   引入Logging API；<br>   引入Java Web Start；<br>   引入JDBC 3.0 API；<br>   引入断言；<br>   引入Preferences API；<br>   引入链式异常处理；<br>   支持IPv6；<br>   支持正则表达式；<br>   引入Image I/O slot machine API。<br>Java Version SE 5.0<br>   开发代号为Tiger（老虎），于2004-09-30发行。<br>   引入的新特性包括:<br>   引入泛型；<br>   增强循环，可以使用迭代方式；<br>   自动装箱与自动拆箱；<br>   类型安全的枚举；<br>   可变参数；<br>   静态引入；<br>   元数据（注解）；<br>   引入Instrumentation。<br>Java Version SE 6<br>   开发代号为Mustang（野马），于2006-12-11发行。<br>   引入的新特性包括：<br>   支持脚本语言；<br>   引入JDBC 4.0 API；<br>   引入Java Compiler API；<br>   可插拔注解；<br>   增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access   Protocol)的支持；<br>   继承Web Services；<br>   做了很多优化。<br>Java Version SE 7<br>   开发代号是Dolphin（海豚），于2011-07-28发行。<br>   引入的新特性包括：<br>   switch语句块中允许以字符串作为分支条件；<br>   在创建泛型对象时应用类型推断；<br>   在一个语句块中捕获多种异常；<br>   支持动态语言；<br>   支持try-with-resources；<br>   引入Java NIO.2开发包；<br>   数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；<br>   钻石型语法；<br>   null值的自动处理。<br>Java Version SE 8<br>   开发代号是Spider（蜘蛛），于2014-03-18发行。<br>   支持 lambda支持；<br>   增强日期与时间API的功能；<br>   对垃圾回收的性能也进行了改进；<br>   并且移除了permgen区。<br>   Lambdas表达式与Functional接口<br>   接口的默认与静态方法<br>   方法引用<br>   重复注解<br>   更好的类型推测机制<br>   扩展注解的支持</p><h1 id="Java体系结构"><a href="#Java体系结构" class="headerlink" title="Java体系结构"></a>Java体系结构</h1><h2 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h2><p>JavaSE（Java  Standard  Edition）：标准版，定位在个人计算机上的应用<br>这个版本是Java平台的核心，它提供了非常丰富的API来开发一般个人计算机上的应用程序，包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。在上世纪90年代末互联网上大放异彩的Applet也属于这个版本。Applet后来为Flash取代，Flash即将被HTML5取代。</p><h2 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h2><p>JavaEE（Java  Enterprise Edition）：企业版，定位在服务器端的应用<br>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：JDBC是让程序员能直接在Java内使用的SQL的语法来访问数据库内的数据；Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术；</p><h2 id="JavaME"><a href="#JavaME" class="headerlink" title="JavaME"></a>JavaME</h2><p>JavaME（Java  Micro  Edition）：微型版，定位在消费性电子产品的应用上<br>JavaME是JavaSE的内伸，包含J2SE的一部分核心类，也有自己的扩展类,增加了适合微小装置的类库：javax.microedition.io.*等。该版本针对资源有限的电子消费产品的需求精简核心类库，并提供了模块化的架构让不同类型产品能够随时增加支持的能力。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E7%BB%93%E6%9E%84%E5%9B%BE.png"                                     ></p><h1 id="Java特性和优势"><a href="#Java特性和优势" class="headerlink" title="Java特性和优势"></a>Java特性和优势</h1><p>跨平台/可移植性<br>这是Java的核心优势。Java在设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。这样的话程序的移植就会非常麻烦。</p><p>1.安全性<br>Java适合于网络/分布式环境，为了达到这个目标，在安全性方面投入了很大的精力，使Java可以很容易构建防病毒，防篡改的系统。</p><p>2.面向对象<br>面向对象是一种程序设计技术，非常适合大型软件的设计和开发。由于C++为了照顾大量C语言使用者而兼容了C，使得自身仅仅成为了带类的C语言，多少影响了其面向对象的彻底性！Java则是完全的面向对象语言。</p><p>3.简单性<br>Java就是C++语法的简化版，我们也可以将Java称之为“C++-”。跟我念“C加加减”，指的就是将C++的一些内容去掉；比如：头文件，指针运算，结构，联合，操作符重载，虚基类等等。同时，由于语法基于C语言，因此学习起来完全不费力。</p><p>4.高性能<br>Java最初发展阶段，总是被人诟病“性能低”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了几十倍运行效率。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。 将一些“热点”字节码编译成本地机器码，并将结果缓存起来，在需要的时候重新调用。这样的话，使Java程序的执行效率大大提高，某些代码甚至接待C++的效率。<br>因此，Java低性能的短腿，已经被完全解决了。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p><p>5.分布式<br>Java是为Internet的分布式环境设计的，因为它能够处理TCP/IP协议。事实上，通过URL访问一个网络资源和访问本地文件是一样简单的。Java还支持远程方法调用(RMI,Remote Method Invocation)，使程序能够通过网络调用方法。</p><p>6.多线程<br>多线程的使用可以带来更好的交互响应和实时行为。 Java多线程的简单性是Java成为主流服务器端开发语言的主要原因之一。</p><p>7.健壮性<br>Java是一种健壮的语言，吸收了C/C++ 语言的优点，但去掉了其影响程序健壮性的部分（如：指针、内存的申请与释放等）。Java程序不可能造成计算机崩溃。即使Java程序也可能有错误。如果出现某种出乎意料之事，程序也不会崩溃，而是把该异常抛出，再通过异常处理机制加以处理。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一句话：Java很好！<br>但是，并不是说学习了java，以后所有的东西都要用java开发了：某些领域其他语言有更出色的表现，比如，Objective C和后来的Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。<br>只能说，不同语言之前，有各自的优势，主要看具体是要做什么项目，其实也是平分秋色的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：此篇文章包括Java的发展史、Java结构和JAVA的特性优势，发展史有过了解即可，Java的结构和特性优势要搞明白，为什么Java一直处于计算机语言的主流地位，Java与其他语言的区别在哪，这对我们以后的项目也有很大的好处。&lt;/p&gt;
&lt;h1 id=&quot;Java简史&quot;&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_发展史" scheme="http://example.com/tags/Java-%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    
  </entry>
  
</feed>
