<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-22T14:40:04.543Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的流程控制</title>
    <link href="http://example.com/2021/12/22/Java_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2021/12/22/Java_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-12-22T14:13:36.000Z</published>
    <updated>2021-12-22T14:40:04.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>【1】流程控制的作用：<br>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。<br>【2】控制语句的分类：<br>控制语句分为三类：顺序、选择和循环。<br>“顺序结构”代表“先执行a，再执行b”的逻辑。<br>“条件判断结构”代表“如果…，则…”的逻辑。<br>“循环结构”代表“如果…，则再继续…”的逻辑。<br>  三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。所以任何一种高级语言都具备上述两种结构。<br>本章是大家真正进入编程界的“门票”。<br>【3】流程控制的流程：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E6%B5%81%E7%A8%8B%E5%9B%BE.png"                                     ></p><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if(表达式){</p><p>}else if(表达式){</p><p>}else{</p><p>}</p><p>if语句会根据小括号里的表达式来判断如果满足条件，则进入对应的大括号，执行大括号里的代码，如果不满足则判断下一个else if，都不满足则执行else的大括号。<br>例如：<br>if(score&gt;=90){<br>        System.out.println(“A级”);<br>}else if(score&gt;=80){<br>        System.out.println(“B级”);<br>}</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch多分支结构(多值情况)<br>语法结构：<br>switch (表达式) {<br>    case 值1:<br>         语句序列1;<br>    case 值2:<br>         语句序列2;<br>        .<br>        .<br>        .<br>}<br>switch语句会根据表达式的值从相匹配的case标签处开始执行，一直执行到break语句处或者是switch语句的末尾。如果表达式的值与任一case值不匹配，则进入default语句（如果存在default语句的情况）。根据表达式值的不同可以执行许多不同的操作。switch语句中case标签在JDK1.5之前必须是整数（long类型除外）或者枚举，不能是字符串，在JDK1.7之后允许使用字符串(String)。大家要注意，当布尔表达式是等值判断的情况，可以使用if-else if-else多分支结构或者switch结构，如果布尔表达式区间判断的情况，则只能使用if-else if-else多分支结构。<br>switch多分支结构的流程图如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/switch.png"                                     ><br>例如：<br>switch(score/10){<br> case 3 : System.out.println(“A级”);break;<br> case 2 : System.out.println(“B级”);break;<br> case 1 : System.out.println(“C级”);break;<br> default:System.out.println(“成绩错误”);break;<br> case 0 : System.out.println(“D级”);break;<br>}<br>switch分支和if分支区别：<br>表达式是等值判断的话–》if ，switch都可以<br>如果表达式是区间判断的情况—》if最好<br>switch应用场合：就是等值判断，等值的情况比较少的情况下      </p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>语法结构：<br>while (布尔表达式) {<br>            循环体;<br>}<br>在循环刚开始时，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于后来每一次额外的循环，都会在开始前重新计算一次。<br>语句中应有使循环趋向于结束的语句，否则会出现无限循环–––”死”循环。<br>while循环结构流程图如图所示:<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/while.png"                                     ><br>例如：<br>int sum = 0;<br> while(num&lt;=5){[2]条件判断<br>  sum += num;[3]循环体<br>  num++;[4]迭代<br>}      </p><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><p>语法结构：<br>do {<br>            循环体;<br>    } while(布尔表达式) ;<br> do-while循环结构会先执行循环体，然后再判断布尔表达式的值，若条件为真，执行循环体，当条件为假时结束循环。do-while循环的循环体至少执行一次。<br> do-while循环结构流程图如图所示：<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/do_while.png"                                     ><br> 例如：<br> int i = 101;<br>int sum = 0;<br>do{<br>    sum += i;<br>    i++;<br>}while(i&lt;=100);//一定要注意写这个分号，否则编译出错<br>System.out.println(i);//102<br>System.out.println(sum);//101<br>while和do-while的区别:<br>while:先判断，再执行<br>do-while:先执行，再判断—》至少被执行一次，从第二次开始才进行判断</p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>语法结构：<br>for (初始表达式; 布尔表达式; 迭代因子) {<br>          循环体;<br>}<br> for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。for循环在第一次反复之前要进行初始化，即执行初始表达式；随后，对布尔表达式进行判定，若判定结果为true，则执行循环体，否则，终止循环；最后在每一次反复的时候，进行某种形式的“步进”，即执行迭代因子。<br>初始化部分设置循环变量的初值<br>条件判断部分为任意布尔表达式<br>迭代因子控制循环变量的增减<br>for循环在执行条件判定后，先执行的循环体部分，再执行步进。<br>for循环结构的流程图如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/for.png"                                     ><br>例如：<br>int sum = 0;<br>int i;<br>for(i = 1;i&lt;=100;i++){<br>sum += i;<br>}<br>System.out.println(sum);<br>System.out.println(i);</p><h2 id="break和continue关键字"><a href="#break和continue关键字" class="headerlink" title="break和continue关键字"></a>break和continue关键字</h2><p>在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。<br>continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。<br>return的作用,结束当前所在方法的执行。</p><h2 id="循环的嵌套"><a href="#循环的嵌套" class="headerlink" title="循环的嵌套"></a>循环的嵌套</h2><p>循环和条件判断分支都是可以进行多层嵌套使用的，很灵活。</p><h3 id="双重嵌套"><a href="#双重嵌套" class="headerlink" title="双重嵌套"></a>双重嵌套</h3><p>比如我要做一个乘法表，就可以用双重嵌套来实现。<br>例如：<br>public class TestFor11{<br>    public static void main(String[] args){<br>                //1<em>6=6   2</em>6=12  3<em>6=18  4</em>6=24  5<em>6=30  6</em>6=36<br>                /*<br>                System.out.print(“1<em>6=6”+”\t”);<br>                System.out.print(“2</em>6=12”+”\t”);<br>                System.out.print(“3<em>6=18”+”\t”);<br>                System.out.print(“4</em>6=24”+”\t”);<br>                System.out.print(“5<em>6=30”+”\t”);<br>                System.out.print(“6</em>6=36”+”\t”);</p><pre><code>            for(int i=1;i&lt;=6;i++)&#123;                    System.out.print(i+&quot;*6=&quot;+i*6+&quot;\t&quot;);            &#125;            //换行            System.out.println();                        //1*7=7   2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49            for(int i=1;i&lt;=7;i++)&#123;                    System.out.print(i+&quot;*7=&quot;+i*7+&quot;\t&quot;);            &#125;            //换行            System.out.println();                        //1*8=8   2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64            for(int i=1;i&lt;=8;i++)&#123;                    System.out.print(i+&quot;*8=&quot;+i*8+&quot;\t&quot;);            &#125;            //换行            System.out.println();            */                        for(int j=1;j&lt;=9;j++)&#123;                    for(int i=1;i&lt;=j;i++)&#123;                            System.out.print(i+&quot;*&quot;+j+&quot;=&quot;+i*j+&quot;\t&quot;);                    &#125;                    //换行                    System.out.println();            &#125;    &#125;</code></pre><p>}<br>运行结果：<br>1<em>1=1<br>1</em>2=2   2<em>2=4<br>1</em>3=3   2<em>3=6   3</em>3=9<br>1<em>4=4   2</em>4=8   3<em>4=12  4</em>4=16<br>1<em>5=5   2</em>5=10  3<em>5=15  4</em>5=20  5<em>5=25<br>1</em>6=6   2<em>6=12  3</em>6=18  4<em>6=24  5</em>6=30  6<em>6=36<br>1</em>7=7   2<em>7=14  3</em>7=21  4<em>7=28  5</em>7=35  6<em>7=42  7</em>7=49<br>1<em>8=8   2</em>8=16  3<em>8=24  4</em>8=32  5<em>8=40  6</em>8=48  7<em>8=56  8</em>8=64<br>1<em>9=9   2</em>9=18  3<em>9=27  4</em>9=36  5<em>9=45  6</em>9=54  7<em>9=63  8</em>9=72  9*9=81</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;p&gt;【1】流程控制的作用：&lt;br&gt;流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_流程控制" scheme="http://example.com/tags/Java-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java_运算符</title>
    <link href="http://example.com/2021/12/22/Java_%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/2021/12/22/Java_%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-12-22T13:40:47.000Z</published>
    <updated>2021-12-22T14:58:12.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>算数运算符就是平时用到的数学中的“+，-，*，/”，然后比较特殊的是取模：“%”，和自增自减：“++（自增），–（自减）”。</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>例如：<br>Java中赋值运算符是“=”，意思是把等号右边的数值赋给左边的内容。</p><p>public class Test1{<br>        public static void main(String[] args){<br>                //任意给出两个数，交换两个数并输出：<br>                //1.给出两个数：<br>                int num1 = 10;<br>                int num2 = 20;</p><pre><code>            //2.输出交换前的两个数：            System.out.println(&quot;交换前：&quot;+num1+&quot;\t&quot;+num2);                        //3.交换            /*            错误代码：            num1 = num2;            num2 = num1;                */                    //解决办法：            //引入一个中间变量:            int t;            t = num1;            num1 = num2;            num2 = t;            /*            int t;            t = num2;            num2 = num1;            num1 = t;                        */                        //4.输出交换后的两个数：            System.out.println(&quot;交换后：&quot;+num1+&quot;\t&quot;+num2);    &#125;</code></pre><p>}</p><h2 id="扩展赋值运算符"><a href="#扩展赋值运算符" class="headerlink" title="扩展赋值运算符"></a>扩展赋值运算符</h2><p>把赋值运算符和算数运算符拼接起来的称为扩展赋值运算符。其中包括“+=，-=，*=，/=”<br>举个例子：a+=10；这个式子结果与a=a+10一样，就是把a的数值加上10再赋值给a。如果原来定义的a值为5，则式子运算完结果就是15。<br>但是a+=10和a=a+b是有区别的，a+=b的可读性稍差，但是编译效率高，是底层自动进行类型转换，a=a+b的可读性好但是编译效率低，需要手动进行类型转换。<br>例如：<br>public class Test2{<br>        public static void main(String[] args){<br>                //实现功能：给出三个数，求和：<br>                //1.给出三个数：<br>                int num1 = 10;<br>                int num2 = 20;<br>                int num3 = 30;<br>                //2.求和<br>                //int sum = num1+num2+num3;<br>                //定义一个变量，用来接收和：<br>                int sum = 0;<br>                sum = sum + num1;//等效：  sum += num1;<br>                sum = sum + num2;// sum += num2;<br>                sum = sum + num3;//sum += num3;<br>                //3.将和输出：<br>                System.out.println(“和：”+sum);<br>        }<br>}</p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系元素符是比较符号两遍大小的，有：&gt;，&lt;，&gt;=，&lt;=，==，!=。这里注意一下==，这个才是等于，两遍数值相等的时候，式子才成立，！=是不等于，两遍式子不想等的时候成立。<br>例如：<br>public class Test3{<br>        public static void main(String[] args){<br>                //&gt;，&lt;，&gt;=，&lt;=，==，!=<br>                //关系运算符最终结果：要么是true要么是false<br>                System.out.println(4&gt;9);//false<br>                System.out.println(4&lt;9);//true<br>                System.out.println(4&gt;=9);//false<br>                System.out.println(4&lt;=9);//true<br>                System.out.println(4==9);//false<br>                System.out.println(4!=9);//true<br>                System.out.println((5&lt;9)!=(6==8));//true<br>        }<br>}</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符是进行逻辑运算的，在计算机组成与原理有讲过他们的运算，有：逻辑与：“&amp;”，逻辑或：“|“，短路与：”&amp;&amp;“，短路或：”||“，逻辑非：”!“，逻辑异或：”^“。<br>这些运算的结果只有true或者false，也就是真或者假。短路的于或比正常的与或的执行效率更高一些。<br>例如：<br>public class Test4{<br>        public static void main(String[] args){<br>                int i=8;<br>                System.out.println((5&gt;7)&amp;&amp;(i++==2)); //false<br>                System.out.println(i);  //8 </p><pre><code>            int a=8;            System.out.println((5&gt;7)&amp;(a++==2)); //false            System.out.println(a); //9                                    int m=8;            System.out.println((5&lt;7)&amp;&amp;(m++==2)); //false            System.out.println(m); //9                        int b=2;            System.out.println((5&lt;7)&amp;(b++==2)); //true            System.out.println(b);  //3                        int c=2;            System.out.println((5&lt;7)&amp;(++c==2)); //false            System.out.println(c);  //3    &#125;</code></pre><p>}</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符是处理数据移位的运算符，有：&amp;，|，^，取反：“~” ， 右移：“&gt;&gt;”，左移：“&lt;&lt;”，无符号右移：“&gt;&gt;&gt;”。<br>前面三个与逻辑运算符长得一样，要区分他们具体是哪一个，看符号两边的数据类型，如果左右连接的是布尔类型的操作数，就是逻辑运算符，如果左右连接的是具体的数值，就是位运算符。<br>位运算不是很常用，了解即可。</p><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>条件运算符是if语句的简化版，也称三元运算符或者三目运算符，写法是：“ a？b ：c ”.<br>其中a是一个布尔类型的表达式，返回结果要么是true要么false，通过a的结果决定最终表达式的结果:<br>如果a的结果是true，那么表达式最终结果为b<br>如果a的结果是false，那么表达式最终结果为c<br>例如：<br>public class Test5{<br>        public static void main(String[] args){<br>                int num = (5&gt;7)?6:9 ;<br>                System.out.println(num);</p><pre><code>            String str = (4==4)?&quot;你好&quot;:&quot;你不好&quot; ;            System.out.println(str);                        System.out.println((4==4)?&quot;你好&quot;:&quot;你不好&quot;);    &#125;</code></pre><p>}</p><h1 id="运算符的优先级别"><a href="#运算符的优先级别" class="headerlink" title="运算符的优先级别"></a>运算符的优先级别</h1><p>我们不需要去刻意的记优先级关系，因为开发中不会特意去写特别复杂的表达式。<br>优先级是：赋值&lt;三目&lt;逻辑&lt;关系&lt;算术&lt;单目。<br>其实就相当于数学中乘除法优先计算于加减法，但是有括号先算括号里的。这个也是这个意思<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E8%BF%90%E7%AE%97%E7%AC%A6.png"                      alt="总图"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h1&gt;&lt;h2 id=&quot;算数运算符&quot;&gt;&lt;a href=&quot;#算数运算符&quot; class=&quot;headerlink&quot; title=&quot;算数运算符&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_运算符" scheme="http://example.com/tags/Java-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据类型</title>
    <link href="http://example.com/2021/12/22/Java_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/12/22/Java_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-12-22T13:19:47.000Z</published>
    <updated>2021-12-22T14:54:08.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>【1】标识符：读音   biao zhi fu<br>【2】什么是标识符？<br>  包，类，变量，方法…..等等,只要是起名字的地方,那个名字就是标识符<br>【3】标识符定义规则：<br>1.四个可以（组成部分）：数字，字母，下划线_，美元符号$<br>注意：字母概念比较宽泛，指的是英文字母，汉字，日语，俄语……<br>但是我们一般起名字尽量使用英文字母<br>2.两个不可以：不可以以数字开头，不可以使用java中的关键字<br>3.见名知意：增加可读性<br>4.大小写敏感：  int a ;  int A;<br>5.遵照驼峰命名：<br> 类名：首字母大写，其余遵循驼峰命名<br> 方法名，变量名：首字母小写，其余遵循驼峰命名<br> 包名：全部小写，不遵循驼峰命名<br>6.长度无限制，但是不建议太长  asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>关键字：被JAVA语言赋予了特殊含义，用作专门用途的单词<br>比如：clss、char、if、for<br>特点：JAVA中所有关键字都为小写<br>官网中关键字的说明：<a class="link"   href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" >https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html<i class="fas fa-external-link-alt"></i></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E5%85%B3%E9%94%AE%E5%AD%97.png"                                     ></p><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p>顾名思义，变量就是可以变化的量，而常量就是一个固定的数值。<br>比如：int a；这里面的a没有赋值，所以在之后的操作中可以是10，20等很多值，即为变量。<br>     int a=10；这里面a给了一个10为初始值，虽然后续也可以修改但是没改之前这个值都是不变的，即为常量。<br>变量和常量的用途是不一样的，比如要是想定义一个年龄这种随着时间岁数回增长的，就可以定义为变量。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java是一种强类型语言，每个变量都必须声明其数据类型。<br>Java的数据类型可分为两大类：基本数据类型（primitive data type）和引用数据类型（reference data type）。<br>基本数据类型分为数值型、字符型、布尔型，其中数值型还分为整数类型和浮点类型。<br>定义这些数据类型的代码分别是：<br>整数：byte、short、int、long<br>浮点数：float、double<br>字符型：char<br>布尔型：boolean<br>引用数据类型分为类、接口、数组。<br>定义这些数据类型的代码分别是：<br>类：class<br>接口：interface<br>数组有很多种定义方法，在后面讲数组的文章会写到。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"                                     ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;h2 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;标识</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_数据类型" scheme="http://example.com/tags/Java-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java核心机制及部署</title>
    <link href="http://example.com/2021/12/22/Java_%E6%A0%B8%E5%BF%83/"/>
    <id>http://example.com/2021/12/22/Java_%E6%A0%B8%E5%BF%83/</id>
    <published>2021-12-22T09:49:41.000Z</published>
    <updated>2021-12-22T14:52:56.086Z</updated>
    
    <content type="html"><![CDATA[<p>前言：此篇文章讲述的是如何在电脑搭建Java运行环境。</p><h1 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h1><h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><h3 id="DOS操作系统"><a href="#DOS操作系统" class="headerlink" title="DOS操作系统"></a>DOS操作系统</h3><p>–Microsoft公司推出的操作系统。（在windows之前的操作系统）<br>–DOS是英文”Disk Operating System”的缩写,其中文含意是”磁盘操作系统”.<br>–DOS是单用户、单任务的操作系统.（只能执行一个任务）<br>就是大家经常用到的黑框框<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/DOS1.png"                                     ></p><h3 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h3><p>–在windows中，我们通过鼠标菜单等来操作系统，而在dos操作系统中，要通过dos命令来操作系统。<br>–是DOS操作系统的命令，是一种面向磁盘的操作命令，<br>–不区分大小写。</p><h3 id="命令学习："><a href="#命令学习：" class="headerlink" title="命令学习："></a>命令学习：</h3><p>windows给我们保留了类似dos系统的操作界面，可以直接操作磁盘！<br>dos 也是一种操作系统，是在windows出现以前用的，后来windows出来后基本没人用了，但是当windows崩溃的时候，还是要的dos方式解决，它是一种纯命令方式，cmd其实就是在windows状态下进入dos方式。<br>控制命令台：win+r—&gt;cmd<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/cmd.png"                                     ><br>具体dos命令：<br>（1）切换盘符： c:  d:  e:   大小写没有区分<br>（2）显示详细信息：dir<br>（3）改变当前目录：cd +路径<br>（4）<br> . 当前目录<br> ..  代表上一层目录<br> 如：cd ..就是切换为上一级目录<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/cd.png"                                     ><br>（5）清屏：cls<br>（6）切换历史命令：上下箭头<br>（7）补全命令： tab按键<br>（8）创建目录：md ,删除目录：rd +文件名<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/md.png"                                     ><br>（9）复制文件命令：copy +文件名<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/copy.png"                                     ><br>（10）删除文件：del +文件名<br>del后面如果接的是文件夹/目录：那么删除的就是这个文件夹下的文件，而不是文件夹<br>以上都是一些常用的DOS命令，在Linux系统和Mac中经常用到类似的命令，熟能生巧<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/del.png"                                     ></p><h2 id="Java环境准备–-gt-装JDK"><a href="#Java环境准备–-gt-装JDK" class="headerlink" title="Java环境准备–&gt;装JDK"></a>Java环境准备–&gt;装JDK</h2><p>【1】下载JDK<br>Orcel官网中下载对应自己计算机操作系统的安装包：<a class="link"   href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" >www.oracle.com/technetwork/java/javase/downloads/index.html<i class="fas fa-external-link-alt"></i></a><br>【2】安装JDK<br>选好安装路径，以后用Idea或者Eclipse配置时候需要用到JDK的路径，其他下一步即可。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84.png"                                     ><br>【3】卸载JDK<br>控制面板卸载即可<br>【4】 验证JDK是否安装成功<br>在桌面上按windows+r然后输入cmd打开命令行然后输入：java -version<br>若出现JDK版本就是安装成功了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/java_version.png"                                     ><br>【5】JDK和JRE：<br>安装时候会安装JDK和JRE<br>区别如下：<br>JDK： Java Development kit   —-&gt;编写Java程序的程序员使用的软件<br>JRE : Java Runtime Enviroment  —-》运行Java程序的用户使用的软件<br>简单说就是只安装JRE就可以运行Java的程序但是不能进行编写。<br>【6】配置环境变量path<br>1.打开我的电脑属性选项<br>2.左边菜单打开高级系统选项，然后打开环境变量<br>3.新建环境变量叫：classpath 变量值为：.<br>如：变量名：classpath<br>   变量值：.<br>classpath作用：只要你配置到classpath中的路径，在执行java的字节码文件的时候，就会去这个配置的路径下找对应的字节码文件，而写了.\就可以全局运行Java了<br>4.新建环境变量：JAVA_HOME:和上一步一样新建然后变量名输入JAVA_HOME，变量值为JDK的安装目录<br>如：变量名：JAVA_HOME<br>   变量值：C:\Program Files\Java\jdk1.8.0_151<br>这个环境变量是为了之后运行tomcat用的<br>5.在path环境变量中加入自己安装JDK的路径加\bin<br>如：C:\Program Files\Java\jdk1.8.0_151\bin<br>也可以新建一个path环境变量然后输入路径+\bin<br>至此我们电脑的Java的运行环境算是配好了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path1.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path2.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path3.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path4.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/path5.png"                                     ></p><h1 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h1><p>JDK帮助文档<br>SUN公司为JDK工具包提供了一整套文档资料,我们习惯上称之为JDK文档。<br>JDK文档中提供了Java中的各种技术的详细资料,以及JDK中提供的各种类的帮助说明。<br>JDk文档是Java语言的完整说明,大多数书籍中的类的介绍都要参照它来完成,它是编程者经常查阅的资料<br>如何理解API：就当做是一个“字典”，“使用手册”，API就相当于是一个电子的帮助文档，可以帮我们查看JDK提供的类的信息，平时查看的时候可结合百度一起看。<br>其实API没有什么神奇的，就是一个电子文档而已，帮助我们查看JAVA中涉及到的一些技能点。</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>现在我们开始写我们的第一段代码了，实现一个输出HelloWorld的功能<br>在任意位置建一个文件夹，起名为Java，然后在文件夹下新建一个txt文档，起名为HelloWorld.java。<br>打开文档输入：<br>public class HelloWorld{<br>        public static void main(String[] args){<br>                System.out.println(“hi 这是一段Java程序。。。”);<br>        }<br>}<br>然后保存。<br>打开我们的命令行，输入cd：java文件夹路径，进到我们这个文件夹里面。<br>输入javac HelloWorld.java对我们写的java文件进行编译。编译完之后在文件夹下面会出现一个.class文件就编译好的文件。<br>输入java HelloWorld运行程序<br>在命令行中出现HelloWorld就成功了。<br>注意：在写代码的时候要注意区分中英文的符号，所有符号必须是英文格式的，不然会出现编译错误。<br>     我们的文件名和类名必须是一样的，不然也会出现编译错误。<br>    编写代码时要注意格式排版，养成习惯，以后方便查看代码和BUG。<br>    <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/javac.png"                                     ><br>    <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/java.png"                                     ></p><h1 id="小练习：输出一个人的个人信息"><a href="#小练习：输出一个人的个人信息" class="headerlink" title="小练习：输出一个人的个人信息"></a>小练习：输出一个人的个人信息</h1><p>要求：在命令行中输出姓名，年龄，职业，身高，体重。<br>代码如下：<br>public class HiWorld{<br>        public static void main(String[] args){<br>                //进行自我介绍：<br>                System.out.println(“姓名:”);<br>                System.out.println(“丽丽”);<br>                System.out.println(“职业:”);<br>                System.out.println(“学生”);<br>                System.out.println(“身高:”);<br>                System.out.println(“180”);<br>                System.out.println(“体重:”);<br>                System.out.println(“130”);</p><pre><code>    &#125;</code></pre><p>}</p><h1 id="扩展：JDK、JRE、JVM的区别"><a href="#扩展：JDK、JRE、JVM的区别" class="headerlink" title="扩展：JDK、JRE、JVM的区别"></a>扩展：JDK、JRE、JVM的区别</h1><p>JDK和JRE的区别<br>初学JAVA很容易被其中的很多概念弄的傻傻分不清楚，首先从概念上理解一下吧，JDK（Java Development Kit）简单理解就是Java开发工具包，JRE(Java Runtime Enviroment)是Java的运行环境，JVM( java virtual machine)也就是常常听到Java虚拟机。JDK是面向开发者的，JRE是面向使用JAVA程序的用户。</p><p>JRE和JVM的区别<br>JVM – java virtual machineJVM就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，class文件并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行，类似于C#中的CLR。<br>JVM不能单独搞定class的执行，解释class的时候JVM需要调用解释所需要的类库lib。在JDK下面的的jre目录里面有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。<br>JVM+Lib=JRE，如果讲的具体点就是bin目录下的jvm.dll文件， jvm.dll无法单独工作，当jvm.dll启动后，会使用explicit的方法(就是使用Win32 API之中的LoadLibrary()与GetProcAddress()来载入辅助用的动态链接库)，而这些辅助用的动态链接库(.dll)都必须位 于jvm.dll所在目录的父目录之中。因此想使用哪个JVM，只需要设置PATH，指向JRE所在目录下的jvm.dll。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：此篇文章讲述的是如何在电脑搭建Java运行环境。&lt;/p&gt;
&lt;h1 id=&quot;核心机制&quot;&gt;&lt;a href=&quot;#核心机制&quot; class=&quot;headerlink&quot; title=&quot;核心机制&quot;&gt;&lt;/a&gt;核心机制&lt;/h1&gt;&lt;h2 id=&quot;常用DOS命令&quot;&gt;&lt;a href=&quot;#常用D</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_部署" scheme="http://example.com/tags/Java-%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Java介绍</title>
    <link href="http://example.com/2021/12/22/Java_%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    <id>http://example.com/2021/12/22/Java_%E5%8F%91%E5%B1%95%E5%8F%B2/</id>
    <published>2021-12-22T09:23:53.000Z</published>
    <updated>2021-12-22T14:43:22.004Z</updated>
    
    <content type="html"><![CDATA[<p>前言：此篇文章包括Java的发展史、Java结构和JAVA的特性优势，发展史有过了解即可，Java的结构和特性优势要搞明白，为什么Java一直处于计算机语言的主流地位，Java与其他语言的区别在哪，这对我们以后的项目也有很大的好处。</p><h1 id="Java简史"><a href="#Java简史" class="headerlink" title="Java简史"></a>Java简史</h1><h2 id="Java发明人"><a href="#Java发明人" class="headerlink" title="Java发明人"></a>Java发明人</h2><p>James  Gosling</p><h2 id="SUN公司"><a href="#SUN公司" class="headerlink" title="SUN公司"></a>SUN公司</h2><p>SUN公司<br>美国SUN(Stanford University Network)公司<br>在中国大陆的正式中文名为“太阳计算机系统（中国）有限公司”<br>在台湾中文名为“升 阳电脑公司”。</p><h3 id="Java发明的缘由"><a href="#Java发明的缘由" class="headerlink" title="Java发明的缘由"></a>Java发明的缘由</h3><p>Java为什么被发明<br>Green项目。<br>应用环境：像电视盒这样的消费类电子产品<br>要求： 语言本身是中立的，也就是跨平台<br>        1996年Java第一次发布就引起了人们的极大兴趣。关注Java的人士不仅限于计算机出版界，  还有诸如《纽约时报》《华盛顿邮报》《商业周刊》这样的主流媒体。Java 是第一种也是唯一种在National Public Radio上占用了10分钟时间来进行介绍的程序设计语言，并且还得到了$100000000的风险投资基金。这些基金全部用来支持用这种特别的计算机语言开发的产品。重温那些令人兴奋的日子是很有意思的。我们将简要地介绍一下Java语言的发展历史：<br>        Java的历史要追溯到1991年，由Patrick Naughton 及其伙伴James Gosling (一个全能的计算机奇才)带领的Sun公同的工程师小组想要设计一种小型的计算机语言，主要用于像有线电视转换盒这类的消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小且能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是不能与任何特定的体系结构捆绑在一起。这个项目被命名为”Green”。<br>        所有就要求有这样的一种代码： 代码短小、紧凑且与平台无关。但是，Sun公司的人都有UNIX的应用背景。因此，所开发的语言以C++为基础。 是Gosling率先创造了这个语言，把这种语言称为“Oak”(这么起名的原因大概是因为他非常喜欢自己办公室外的橡树)。Sun 公司的人后来发现Oak是一种已有的计算机语言的名字，于是，将其改名为Java。</p><h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2><p>经历阶段<br>1991年，James Gosling在SUN公司的工程师小组想要设计这样一种小型计算机语言。该语言主要用于像电视盒这样的消费类电子产品。另外，由于不同的厂商选择不同的CPU和操作系统，因此，要求该语言不能和特定的体系结构绑在一起，要求语言本身是中立的，也就是跨平台的。所以，将这个语言命名为“Green”，类似于绿色软件的意思。后来，改名为Oak，橡树的意思。改名后发现已经有一种语言叫这个名字了，再改名叫Java。Java语言发展到今天经历了一系列的过程：<br>–1991年，SUN公司的Green项目，Oak<br>–1995年，推出Java测试版<br>–1996年，JDK1.0<br>–1997年，JDK1.1<br>–1998年，JDK1.2，大大改进了早期版本缺陷，是一个革命性的版本，更名为Java2。<br>–2004年，J2SE 5.0 (1.5.0)  Tiger老虎 成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0<br>–2005年，Java的各种版本已经更名，以取消其中的数字”2”： J2ME更名为Java ME， J2SE更名为Java SE， J2EE更名为Java EE；<br>–2006年，J2SE 6.0 (1.6.0)  Mustang野马<br>–2009年，甲骨文(oracle)收购SUN，交易高达价格74亿<br>–2011年，JavaSE7.0   Dolphin海豚<br>–2014年，JavaSE8.0<br>–2017年，JAVA 9.0<br>–2018年3月，JAVA 10<br>–2018年9月，JAVA 11<br>–2019年3月，JAVA 12<br>–2019年9月，JAVA 13<br>–2020年3月，JAVA 14<br>现在SUN公司已经被oracle公司收购，目前每半年更新一次java的版本。但是，企业中的主流仍然以7和8为主。对于初学者，应该以企业主流应用版本为核心进行学习，没有必须在此处追求最新版本。</p><h2 id="不同版本JDK说明"><a href="#不同版本JDK说明" class="headerlink" title="不同版本JDK说明"></a>不同版本JDK说明</h2><p>JDK说明<br>JDK Version 1.1<br>   于1997-02-19发行。<br>   引入的新特性包括：<br>   引入JDBC（Java Database Connectivity）；<br>   支持内部类；<br>   引入Java Bean；<br>   引入RMI（Remote Method Invocation）；<br>   引入反射（仅用于内省）。<br>J2SE Version 1.2<br>   开发代号为Playground（操场），于1998-12-08发行。<br>   引入的新特性包括：<br>   引入集合（Collection）框架；<br>   对字符串常量做内存映射；<br>   引入JIT（Just In Time）编译器；<br>   引入对打包的Java文件进行数字签名；<br>   引入控制授权访问系统资源的策略工具；<br>   引入JFC（Java Foundation Classes），包括Swing 1.0、拖放和Java 2D类库；<br>   引入Java 插件；<br>   在JDBC中引入可滚动结果集、BLOB、CLOB、批量更新和用户自定义类型；<br>   在Applet中添加声音支持。<br>J2SE Version 1.3<br>  开发代号为Kestrel（红隼），于2000-05-08发行。<br>   引入的新特性包括：<br>   引入Java Sound API；<br>   jar文件索引；<br>   对Java的各个方面都做了大量优化和增强。<br>J2SE Version 1.4<br>   开发代号为Merlin（隼），于2004-02-06发行（首次在JCP下发行）。<br>   引入的新特性包括:<br>   XML处理；<br>   Java打印服务；<br>   引入Logging API；<br>   引入Java Web Start；<br>   引入JDBC 3.0 API；<br>   引入断言；<br>   引入Preferences API；<br>   引入链式异常处理；<br>   支持IPv6；<br>   支持正则表达式；<br>   引入Image I/O slot machine API。<br>Java Version SE 5.0<br>   开发代号为Tiger（老虎），于2004-09-30发行。<br>   引入的新特性包括:<br>   引入泛型；<br>   增强循环，可以使用迭代方式；<br>   自动装箱与自动拆箱；<br>   类型安全的枚举；<br>   可变参数；<br>   静态引入；<br>   元数据（注解）；<br>   引入Instrumentation。<br>Java Version SE 6<br>   开发代号为Mustang（野马），于2006-12-11发行。<br>   引入的新特性包括：<br>   支持脚本语言；<br>   引入JDBC 4.0 API；<br>   引入Java Compiler API；<br>   可插拔注解；<br>   增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access   Protocol)的支持；<br>   继承Web Services；<br>   做了很多优化。<br>Java Version SE 7<br>   开发代号是Dolphin（海豚），于2011-07-28发行。<br>   引入的新特性包括：<br>   switch语句块中允许以字符串作为分支条件；<br>   在创建泛型对象时应用类型推断；<br>   在一个语句块中捕获多种异常；<br>   支持动态语言；<br>   支持try-with-resources；<br>   引入Java NIO.2开发包；<br>   数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；<br>   钻石型语法；<br>   null值的自动处理。<br>Java Version SE 8<br>   开发代号是Spider（蜘蛛），于2014-03-18发行。<br>   支持 lambda支持；<br>   增强日期与时间API的功能；<br>   对垃圾回收的性能也进行了改进；<br>   并且移除了permgen区。<br>   Lambdas表达式与Functional接口<br>   接口的默认与静态方法<br>   方法引用<br>   重复注解<br>   更好的类型推测机制<br>   扩展注解的支持</p><h1 id="Java体系结构"><a href="#Java体系结构" class="headerlink" title="Java体系结构"></a>Java体系结构</h1><h2 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h2><p>JavaSE（Java  Standard  Edition）：标准版，定位在个人计算机上的应用<br>这个版本是Java平台的核心，它提供了非常丰富的API来开发一般个人计算机上的应用程序，包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。在上世纪90年代末互联网上大放异彩的Applet也属于这个版本。Applet后来为Flash取代，Flash即将被HTML5取代。</p><h2 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h2><p>JavaEE（Java  Enterprise Edition）：企业版，定位在服务器端的应用<br>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：JDBC是让程序员能直接在Java内使用的SQL的语法来访问数据库内的数据；Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术；</p><h2 id="JavaME"><a href="#JavaME" class="headerlink" title="JavaME"></a>JavaME</h2><p>JavaME（Java  Micro  Edition）：微型版，定位在消费性电子产品的应用上<br>JavaME是JavaSE的内伸，包含J2SE的一部分核心类，也有自己的扩展类,增加了适合微小装置的类库：javax.microedition.io.*等。该版本针对资源有限的电子消费产品的需求精简核心类库，并提供了模块化的架构让不同类型产品能够随时增加支持的能力。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/%E7%BB%93%E6%9E%84%E5%9B%BE.png"                                     ></p><h1 id="Java特性和优势"><a href="#Java特性和优势" class="headerlink" title="Java特性和优势"></a>Java特性和优势</h1><p>跨平台/可移植性<br>这是Java的核心优势。Java在设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。这样的话程序的移植就会非常麻烦。</p><p>1.安全性<br>Java适合于网络/分布式环境，为了达到这个目标，在安全性方面投入了很大的精力，使Java可以很容易构建防病毒，防篡改的系统。</p><p>2.面向对象<br>面向对象是一种程序设计技术，非常适合大型软件的设计和开发。由于C++为了照顾大量C语言使用者而兼容了C，使得自身仅仅成为了带类的C语言，多少影响了其面向对象的彻底性！Java则是完全的面向对象语言。</p><p>3.简单性<br>Java就是C++语法的简化版，我们也可以将Java称之为“C++-”。跟我念“C加加减”，指的就是将C++的一些内容去掉；比如：头文件，指针运算，结构，联合，操作符重载，虚基类等等。同时，由于语法基于C语言，因此学习起来完全不费力。</p><p>4.高性能<br>Java最初发展阶段，总是被人诟病“性能低”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了几十倍运行效率。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。 将一些“热点”字节码编译成本地机器码，并将结果缓存起来，在需要的时候重新调用。这样的话，使Java程序的执行效率大大提高，某些代码甚至接待C++的效率。<br>因此，Java低性能的短腿，已经被完全解决了。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p><p>5.分布式<br>Java是为Internet的分布式环境设计的，因为它能够处理TCP/IP协议。事实上，通过URL访问一个网络资源和访问本地文件是一样简单的。Java还支持远程方法调用(RMI,Remote Method Invocation)，使程序能够通过网络调用方法。</p><p>6.多线程<br>多线程的使用可以带来更好的交互响应和实时行为。 Java多线程的简单性是Java成为主流服务器端开发语言的主要原因之一。</p><p>7.健壮性<br>Java是一种健壮的语言，吸收了C/C++ 语言的优点，但去掉了其影响程序健壮性的部分（如：指针、内存的申请与释放等）。Java程序不可能造成计算机崩溃。即使Java程序也可能有错误。如果出现某种出乎意料之事，程序也不会崩溃，而是把该异常抛出，再通过异常处理机制加以处理。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一句话：Java很好！<br>但是，并不是说学习了java，以后所有的东西都要用java开发了：某些领域其他语言有更出色的表现，比如，Objective C和后来的Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。<br>只能说，不同语言之前，有各自的优势，主要看具体是要做什么项目，其实也是平分秋色的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：此篇文章包括Java的发展史、Java结构和JAVA的特性优势，发展史有过了解即可，Java的结构和特性优势要搞明白，为什么Java一直处于计算机语言的主流地位，Java与其他语言的区别在哪，这对我们以后的项目也有很大的好处。&lt;/p&gt;
&lt;h1 id=&quot;Java简史&quot;&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java_发展史" scheme="http://example.com/tags/Java-%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>博客简介</title>
    <link href="http://example.com/2021/12/22/%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2021/12/22/%E7%AE%80%E4%BB%8B/</id>
    <published>2021-12-22T06:10:25.000Z</published>
    <updated>2021-12-22T09:42:37.259Z</updated>
    
    <content type="html"><![CDATA[<p>本博客于大学开始制作，记录学习记录和学习过程遇到的问题和解决办法。<br>博客设有分类和标签搜索功能，方便大家查找内容。<br>如遇到问题，可在评论区留下你的问题和建议。<br>谢谢大家阅读。</p><p>This blog was created at the university to record learning records and problems encountered in the learning process and solutions.<br>The blog is equipped with classification and tag search functions to make it easy for everyone to find content.<br>If you encounter problems, you can leave your questions and suggestions in the comment area.<br>Thank you all for reading.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本博客于大学开始制作，记录学习记录和学习过程遇到的问题和解决办法。&lt;br&gt;博客设有分类和标签搜索功能，方便大家查找内容。&lt;br&gt;如遇到问题，可在评论区留下你的问题和建议。&lt;br&gt;谢谢大家阅读。&lt;/p&gt;
&lt;p&gt;This blog was created at the univ</summary>
      
    
    
    
    
    <category term="简介" scheme="http://example.com/tags/%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/12/21/hello-world/"/>
    <id>http://example.com/2021/12/21/hello-world/</id>
    <published>2021-12-21T10:49:46.020Z</published>
    <updated>2021-12-21T10:49:46.020Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
